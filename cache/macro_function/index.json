{"#define VOS_AVLL_INIT_TREE(TREE, COMPARE, KEY_OFF, NODE_OFF)                                                           \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        (TREE).stTreeInfo.pfCompare = (COMPARE);                                                                       \\\n        (TREE).stTreeInfo.usKeyOffset = (KEY_OFF);                                                                     \\\n        (TREE).stTreeInfo.usNodeOffset = (NODE_OFF);                                                                   \\\n        VOS_AVL3_INIT_TREE((TREE).stTree, (TREE).stTreeInfo);                                                          \\\n    } while (0)": "0", "#define VOS_AVLL_INIT_NODE(NODE) VOS_AVL3_INIT_NODE((NODE))": "1", "#define VOS_AVLL_INSERT(TREE, NODE) VOS_AVL3_INSERT((TREE).stTree, (NODE), (TREE).stTreeInfo)": "2", "#define VOS_AVLL_INSERT_OR_FIND(TREE, NODE) VOS_AVL3_INSERT_OR_FIND((TREE).stTree, (NODE), (TREE).stTreeInfo)": "3", "#define VOS_AVLL_DELETE(TREE, NODE) VOS_AVL3_DELETE((TREE).stTree, (NODE))": "4", "#define VOS_AVLL_FIND(TREE, KEY) VOS_AVL3_FIND((TREE).stTree, (KEY), (TREE).stTreeInfo)": "5", "#define VOS_AVLL_NEXT(TREE, NODE) VOS_AVL3_NEXT((NODE), (TREE).stTreeInfo)": "6", "#define VOS_AVLL_PREV(TREE, NODE) VOS_AVL3_PREV((NODE), (TREE).stTreeInfo)": "7", "#define VOS_AVLL_FIRST(TREE) VOS_AVL3_FIRST((TREE).stTree, (TREE).stTreeInfo)": "8", "#define VOS_AVLL_LAST(TREE) VOS_AVL3_LAST((TREE).stTree, (TREE).stTreeInfo)": "9", "#define VOS_AVLL_IN_TREE(NODE) VOS_AVL3_IN_TREE((NODE))": "10", "#define VOS_AVLL_FIND_NEXT(TREE, KEY) VOS_AVL3_FIND_NEXT((TREE).stTree, (KEY), (TREE).stTreeInfo)": "11", "#define VOS_AVLL_FIND_OR_FIND_NEXT(TREE, KEY) VOS_AVL3_FIND_OR_FIND_NEXT((TREE).stTree, (KEY), (TREE).stTreeInfo)": "12", "#define VOS_AVL3_INIT_TREE(TREE, TREE_INFO)                                                                            \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        (TREE).pstFirst = (AVL3_NODE *)AVL_NULL_PTR;                                                                   \\\n        (TREE).pstLast = (AVL3_NODE *)AVL_NULL_PTR;                                                                    \\\n        (TREE).pstRoot = (AVL3_NODE *)AVL_NULL_PTR;                                                                    \\\n    } while (0)": "13", "#define VOS_AVL3_INIT_NODE(NODE)                                                                                       \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        (NODE).pstParent = (AVL3_NODE *)AVL_NULL_PTR;                                                                  \\\n        (NODE).pstLeft = (AVL3_NODE *)AVL_NULL_PTR;                                                                    \\\n        (NODE).pstRight = (AVL3_NODE *)AVL_NULL_PTR;                                                                   \\\n        (NODE).sLHeight = -1;                                                                                          \\\n        (NODE).sRHeight = -1;                                                                                          \\\n    } while (0)": "14", "#define VOS_AVL3_INSERT(TREE, NODE, TREE_INFO) (AVL_NULL_PTR == VOS_AVL3_Insert_Or_Find(&(TREE), &(NODE), &(TREE_INFO)))": "15", "#define VOS_AVL3_INSERT_OR_FIND(TREE, NODE, TREE_INFO) VOS_AVL3_Insert_Or_Find(&(TREE), &(NODE), &(TREE_INFO))": "16", "#define VOS_AVL3_DELETE(TREE, NODE) VOS_AVL3_Delete(&(TREE), &(NODE))": "17", "#define VOS_AVL3_FIND(TREE, KEY, TREE_INFO) VOS_AVL3_Find(&(TREE), (KEY), &(TREE_INFO))": "18", "#define VOS_AVL3_NEXT(NODE, TREE_INFO) VOS_AVL3_Next(&(NODE), &(TREE_INFO))": "19", "#define VOS_AVL3_PREV(NODE, TREE_INFO) VOS_AVL3_Prev(&(NODE), &(TREE_INFO))": "20", "#define VOS_AVL3_FIRST(TREE, TREE_INFO) VOS_AVL3_First(&(TREE), &(TREE_INFO))": "21", "#define VOS_AVL3_LAST(TREE, TREE_INFO) VOS_AVL3_Last(&(TREE), &(TREE_INFO))": "22", "#define VOS_AVL3_IN_TREE(NODE) (((NODE).sLHeight != -1) && ((NODE).sRHeight != -1))": "23", "#define VOS_AVL3_FIND_NEXT(TREE, KEY, TREE_INFO) AVL3_Find_Or_Find_Next(&(TREE), (KEY), AVL_TRUE, &(TREE_INFO))": "24", "#define VOS_AVL3_FIND_OR_FIND_NEXT(TREE, KEY, TREE_INFO) AVL3_Find_Or_Find_Next(&(TREE), (KEY), AVL_FALSE, &(TREE_INFO))": "25", "#define VOS_AVL3_MAX(X, Y) (((X) > (Y)) ? (X) : (Y))": "26", "#define VOS_AVL_INIT_TREE(TREE, COMPARE)                                                                               \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        (TREE).pfnCompare = (COMPARE);                                                                                 \\\n        (TREE).pstFirst = (AVL_NODE *)AVL_NULL_PTR;                                                                    \\\n        (TREE).pstLast = (AVL_NODE *)AVL_NULL_PTR;                                                                     \\\n        (TREE).pstRoot = (AVL_NODE *)AVL_NULL_PTR;                                                                     \\\n    } while (0)": "27", "#define VOS_AVL_INIT_NODE(NODE, SELF, KEY)                                                                             \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        (NODE).pstParent = (AVL_NODE *)AVL_NULL_PTR;                                                                   \\\n        (NODE).pstLeft = (AVL_NODE *)AVL_NULL_PTR;                                                                     \\\n        (NODE).pstRight = (AVL_NODE *)AVL_NULL_PTR;                                                                    \\\n        (NODE).pSelf = (SELF);                                                                                         \\\n        (NODE).pKey = (KEY);                                                                                           \\\n        (NODE).sLHeight = -1;                                                                                          \\\n        (NODE).sRHeight = -1;                                                                                          \\\n    } while (0)": "28", "#define VOS_AVL_INSERT(TREE, NODE) (VOS_AVL_Insert_Or_Find(&(TREE), &(NODE)) == AVL_NULL_PTR)": "29", "#define VOS_AVL_INSERT_OR_FIND(TREE, NODE) VOS_AVL_Insert_Or_Find(&(TREE), &(NODE))": "30", "#define VOS_AVL_DELETE(TREE, NODE) VOS_AVL_Delete(&(TREE), &(NODE))": "31", "#define VOS_AVL_FIND(TREE, KEY) VOS_AVL_Find(&(TREE), (KEY))": "32", "#define VOS_AVL_NEXT(NODE) VOS_AVL_Next(&(NODE))": "33", "#define VOS_AVL_PREV(NODE) VOS_AVL_Prev(&(NODE))": "34", "#define VOS_AVL_FIRST(TREE)                                                                                            \\\n    (((&(TREE))->pstFirst != (AVL_NODE *)AVL_NULL_PTR) ? (&(TREE))->pstFirst->pSelf : AVL_NULL_PTR)": "35", "#define VOS_AVL_LAST(TREE) (((&(TREE))->pstLast != (AVL_NODE *)AVL_NULL_PTR) ? (&(TREE))->pstLast->pSelf : AVL_NULL_PTR)": "36", "#define VOS_AVL_IN_TREE(NODE) (((NODE).sLHeight != -1) && ((NODE).sRHeight != -1))": "37", "#define VOS_AVL_FIND_NEXT(TREE, KEY) VOS_AVL_Find_Or_Find_Next(&(TREE), (KEY), AVL_TRUE)": "38", "#define VOS_AVL_FIND_OR_FIND_NEXT(TREE, KEY) VOS_AVL_Find_Or_Find_Next(&(TREE), (KEY), AVL_FALSE)": "39", "#define VOS_V2_AVL_MAX(X, Y) (((X) > (Y)) ? (X) : (Y))": "40", "#define FIND_LEFTMOST_NODE(pstNode)                                                                                    \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        while ((pstNode)->pstLeft != AVL_NULL_PTR)                                                                     \\\n        {                                                                                                              \\\n            (pstNode) = (pstNode)->pstLeft;                                                                            \\\n        }                                                                                                              \\\n    } while (0)": "41", "#define FIND_RIGHTMOST_NODE(pstNode)                                                                                   \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        while ((pstNode)->pstRight != AVL_NULL_PTR)                                                                    \\\n        {                                                                                                              \\\n            (pstNode) = (pstNode)->pstRight;                                                                           \\\n        }                                                                                                              \\\n    } while (0)": "42", "#define TREE_OR_TREEINFO_IS_NULL(pstTree, pstTreeInfo) (((pstTree) == AVL_NULL_PTR) || ((pstTreeInfo) == AVL_NULL_PTR))": "43", "#define GET_NODE_START_ADDRESS(pstNode, usOffset)                                                                      \\\n    (((pstNode) != AVL_NULL_PTR) ? (void *)((unsigned char *)(pstNode) - (usOffset)) : AVL_NULL_PTR)": "44", "#define GET_KEYOFFSET(pstTreeInfo) ((int)((pstTreeInfo)->usKeyOffset - (pstTreeInfo)->usNodeOffset))": "45", "#define MD5_LINEAR_FUNC_F(B, C, D) (((B) & (C)) | ((~(B)) & (D)))": "46", "#define MD5_LINEAR_FUNC_G(B, C, D) (((B) & (D)) | ((C) & (~(D))))": "47", "#define MD5_LINEAR_FUNC_H(B, C, D) ((B) ^ (C) ^ (D))": "48", "#define MD5_LINEAR_FUNC_I(B, C, D) ((C) ^ ((B) | (~(D))))": "49", "#define MD5_RECORD_MESSAGE_LEN(context)                                                                                \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        uint32_t __i;                                                                                                  \\\n        for (__i = 0; __i < sizeof((context)->aulCount) / sizeof((context)->aulCount[0]); __i++)                       \\\n        {                                                                                                              \\\n            (context)->aucBuffer[(context)->uiPos] = (uint8_t)((context)->aulCount[__i] & 0xff);                       \\\n            (context)->uiPos++;                                                                                        \\\n            (context)->aucBuffer[(context)->uiPos] = (uint8_t)(((context)->aulCount[__i] >> 8) & 0xff);                \\\n            (context)->uiPos++;                                                                                        \\\n            (context)->aucBuffer[(context)->uiPos] = (uint8_t)(((context)->aulCount[__i] >> 16) & 0xff);               \\\n            (context)->uiPos++;                                                                                        \\\n            (context)->aucBuffer[(context)->uiPos] = (uint8_t)(((context)->aulCount[__i] >> 24) & 0xff);               \\\n            (context)->uiPos++;                                                                                        \\\n        }                                                                                                              \\\n    } while (0)": "50", "#define MD5_COMPOSE_DIGEST(digest, md5State)                                                                           \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        uint32_t __i = 0;                                                                                              \\\n        uint32_t __j = 0;                                                                                              \\\n        for (; __i < sizeof((md5State)) / sizeof((md5State)[0]); __i++)                                                \\\n        {                                                                                                              \\\n            (digest)[__j] = (uint8_t)(md5State)[__i];                                                                  \\\n            __j++;                                                                                                     \\\n            (digest)[__j] = (uint8_t)((md5State)[__i] >> 8);                                                           \\\n            __j++;                                                                                                     \\\n            (digest)[__j] = (uint8_t)((md5State)[__i] >> 16);                                                          \\\n            __j++;                                                                                                     \\\n            (digest)[__j] = (uint8_t)((md5State)[__i] >> 24);                                                          \\\n            __j++;                                                                                                     \\\n        }                                                                                                              \\\n    } while (0)": "51", "#define MD5_CYCLE_MOVE(numMoved, moveBit)                                                                              \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        uint32_t __tmpValue;                                                                                           \\\n        __tmpValue = (numMoved) >> (32 - (moveBit));                                                                   \\\n        (numMoved) = (numMoved) << (moveBit);                                                                          \\\n        (numMoved) += __tmpValue;                                                                                      \\\n    } while (0)": "52", "#define MD5_CHANGE_STATE_IN_TURN(state, value)                                                                         \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        (state)[0] = (state)[3];                                                                                       \\\n        (state)[3] = (state)[2];                                                                                       \\\n        (state)[2] = (state)[1];                                                                                       \\\n        (state)[1] = (state)[1] + (value);                                                                             \\\n    } while (0)": "53", "#define MD5_FUNC_F(value, md5State, text, addEnd, moveBit)                                                             \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        (value) = MD5_LINEAR_FUNC_F((md5State)[1], (md5State)[2], (md5State)[3]) + (md5State)[0] + (text) + (addEnd);  \\\n        MD5_CYCLE_MOVE((value), (moveBit));                                                                            \\\n        MD5_CHANGE_STATE_IN_TURN((md5State), (value));                                                                 \\\n    } while (0)": "54", "#define MD5_FUNC_G(value, md5State, text, addEnd, moveBit)                                                             \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        (value) = MD5_LINEAR_FUNC_G((md5State)[1], (md5State)[2], (md5State)[3]) + (md5State)[0] + (text) + (addEnd);  \\\n        MD5_CYCLE_MOVE((value), (moveBit));                                                                            \\\n        MD5_CHANGE_STATE_IN_TURN((md5State), (value));                                                                 \\\n    } while (0)": "55", "#define MD5_FUNC_H(value, md5State, text, addEnd, moveBit)                                                             \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        (value) = MD5_LINEAR_FUNC_H((md5State)[1], (md5State)[2], (md5State)[3]) + (md5State)[0] + (text) + (addEnd);  \\\n        MD5_CYCLE_MOVE((value), (moveBit));                                                                            \\\n        MD5_CHANGE_STATE_IN_TURN((md5State), (value));                                                                 \\\n    } while (0)": "56", "#define MD5_FUNC_I(value, md5State, text, addEnd, moveBit)                                                             \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        (value) = MD5_LINEAR_FUNC_I((md5State)[1], (md5State)[2], (md5State)[3]) + (md5State)[0] + (text) + (addEnd);  \\\n        MD5_CYCLE_MOVE((value), (moveBit));                                                                            \\\n        MD5_CHANGE_STATE_IN_TURN((md5State), (value));                                                                 \\\n    } while (0)": "57", "#define MD5_F_PROC(tmpValue, tmpState, textFragment)                                                                   \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        MD5_FUNC_F((tmpValue), (tmpState), (textFragment)[0], 0xd76aa478, 7);                                          \\\n        MD5_FUNC_F((tmpValue), (tmpState), (textFragment)[1], 0xe8c7b756, 12);                                         \\\n        MD5_FUNC_F((tmpValue), (tmpState), (textFragment)[2], 0x242070db, 17);                                         \\\n        MD5_FUNC_F((tmpValue), (tmpState), (textFragment)[3], 0xc1bdceee, 22);                                         \\\n        MD5_FUNC_F((tmpValue), (tmpState), (textFragment)[4], 0xf57c0faf, 7);                                          \\\n        MD5_FUNC_F((tmpValue), (tmpState), (textFragment)[5], 0x4787c62a, 12);                                         \\\n        MD5_FUNC_F((tmpValue), (tmpState), (textFragment)[6], 0xa8304613, 17);                                         \\\n        MD5_FUNC_F((tmpValue), (tmpState), (textFragment)[7], 0xfd469501, 22);                                         \\\n        MD5_FUNC_F((tmpValue), (tmpState), (textFragment)[8], 0x698098d8, 7);                                          \\\n        MD5_FUNC_F((tmpValue), (tmpState), (textFragment)[9], 0x8b44f7af, 12);                                         \\\n        MD5_FUNC_F((tmpValue), (tmpState), (textFragment)[10], 0xffff5bb1, 17);                                        \\\n        MD5_FUNC_F((tmpValue), (tmpState), (textFragment)[11], 0x895cd7be, 22);                                        \\\n        MD5_FUNC_F((tmpValue), (tmpState), (textFragment)[12], 0x6b901122, 7);                                         \\\n        MD5_FUNC_F((tmpValue), (tmpState), (textFragment)[13], 0xfd987193, 12);                                        \\\n        MD5_FUNC_F((tmpValue), (tmpState), (textFragment)[14], 0xa679438e, 17);                                        \\\n        MD5_FUNC_F((tmpValue), (tmpState), (textFragment)[15], 0x49b40821, 22);                                        \\\n    } while (0)": "58", "#define MD5_G_PROC(tmpValue, tmpState, textFragment)                                                                   \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        MD5_FUNC_G((tmpValue), (tmpState), (textFragment)[1], 0xf61e2562, 5);                                          \\\n        MD5_FUNC_G((tmpValue), (tmpState), (textFragment)[6], 0xc040b340, 9);                                          \\\n        MD5_FUNC_G((tmpValue), (tmpState), (textFragment)[11], 0x265e5a51, 14);                                        \\\n        MD5_FUNC_G((tmpValue), (tmpState), (textFragment)[0], 0xe9b6c7aa, 20);                                         \\\n        MD5_FUNC_G((tmpValue), (tmpState), (textFragment)[5], 0xd62f105d, 5);                                          \\\n        MD5_FUNC_G((tmpValue), (tmpState), (textFragment)[10], 0x02441453, 9);                                         \\\n        MD5_FUNC_G((tmpValue), (tmpState), (textFragment)[15], 0xd8a1e681, 14);                                        \\\n        MD5_FUNC_G((tmpValue), (tmpState), (textFragment)[4], 0xe7d3fbc8, 20);                                         \\\n        MD5_FUNC_G((tmpValue), (tmpState), (textFragment)[9], 0x21e1cde6, 5);                                          \\\n        MD5_FUNC_G((tmpValue), (tmpState), (textFragment)[14], 0xc33707d6, 9);                                         \\\n        MD5_FUNC_G((tmpValue), (tmpState), (textFragment)[3], 0xf4d50d87, 14);                                         \\\n        MD5_FUNC_G((tmpValue), (tmpState), (textFragment)[8], 0x455a14ed, 20);                                         \\\n        MD5_FUNC_G((tmpValue), (tmpState), (textFragment)[13], 0xa9e3e905, 5);                                         \\\n        MD5_FUNC_G((tmpValue), (tmpState), (textFragment)[2], 0xfcefa3f8, 9);                                          \\\n        MD5_FUNC_G((tmpValue), (tmpState), (textFragment)[7], 0x676f02d9, 14);                                         \\\n        MD5_FUNC_G((tmpValue), (tmpState), (textFragment)[12], 0x8d2a4c8a, 20);                                        \\\n    } while (0)": "59", "#define MD5_H_PROC(tmpValue, tmpState, textFragment)                                                                   \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        MD5_FUNC_H((tmpValue), (tmpState), (textFragment)[5], 0xfffa3942, 4);                                          \\\n        MD5_FUNC_H((tmpValue), (tmpState), (textFragment)[8], 0x8771f681, 11);                                         \\\n        MD5_FUNC_H((tmpValue), (tmpState), (textFragment)[11], 0x6d9d6122, 16);                                        \\\n        MD5_FUNC_H((tmpValue), (tmpState), (textFragment)[14], 0xfde5380c, 23);                                        \\\n        MD5_FUNC_H((tmpValue), (tmpState), (textFragment)[1], 0xa4beea44, 4);                                          \\\n        MD5_FUNC_H((tmpValue), (tmpState), (textFragment)[4], 0x4bdecfa9, 11);                                         \\\n        MD5_FUNC_H((tmpValue), (tmpState), (textFragment)[7], 0xf6bb4b60, 16);                                         \\\n        MD5_FUNC_H((tmpValue), (tmpState), (textFragment)[10], 0xbebfbc70, 23);                                        \\\n        MD5_FUNC_H((tmpValue), (tmpState), (textFragment)[13], 0x289b7ec6, 4);                                         \\\n        MD5_FUNC_H((tmpValue), (tmpState), (textFragment)[0], 0xeaa127fa, 11);                                         \\\n        MD5_FUNC_H((tmpValue), (tmpState), (textFragment)[3], 0xd4ef3085, 16);                                         \\\n        MD5_FUNC_H((tmpValue), (tmpState), (textFragment)[6], 0x04881d05, 23);                                         \\\n        MD5_FUNC_H((tmpValue), (tmpState), (textFragment)[9], 0xd9d4d039, 4);                                          \\\n        MD5_FUNC_H((tmpValue), (tmpState), (textFragment)[12], 0xe6db99e5, 11);                                        \\\n        MD5_FUNC_H((tmpValue), (tmpState), (textFragment)[15], 0x1fa27cf8, 16);                                        \\\n        MD5_FUNC_H((tmpValue), (tmpState), (textFragment)[2], 0xc4ac5665, 23);                                         \\\n    } while (0)": "60", "#define MD5_I_PROC(tmpValue, tmpState, textFragment)                                                                   \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        MD5_FUNC_I((tmpValue), (tmpState), (textFragment)[0], 0xf4292244, 6);                                          \\\n        MD5_FUNC_I((tmpValue), (tmpState), (textFragment)[7], 0x432aff97, 10);                                         \\\n        MD5_FUNC_I((tmpValue), (tmpState), (textFragment)[14], 0xab9423a7, 15);                                        \\\n        MD5_FUNC_I((tmpValue), (tmpState), (textFragment)[5], 0xfc93a039, 21);                                         \\\n        MD5_FUNC_I((tmpValue), (tmpState), (textFragment)[12], 0x655b59c3, 6);                                         \\\n        MD5_FUNC_I((tmpValue), (tmpState), (textFragment)[3], 0x8f0ccc92, 10);                                         \\\n        MD5_FUNC_I((tmpValue), (tmpState), (textFragment)[10], 0xffeff47d, 15);                                        \\\n        MD5_FUNC_I((tmpValue), (tmpState), (textFragment)[1], 0x85845dd1, 21);                                         \\\n        MD5_FUNC_I((tmpValue), (tmpState), (textFragment)[8], 0x6fa87e4f, 6);                                          \\\n        MD5_FUNC_I((tmpValue), (tmpState), (textFragment)[15], 0xfe2ce6e0, 10);                                        \\\n        MD5_FUNC_I((tmpValue), (tmpState), (textFragment)[6], 0xa3014314, 15);                                         \\\n        MD5_FUNC_I((tmpValue), (tmpState), (textFragment)[13], 0x4e0811a1, 21);                                        \\\n        MD5_FUNC_I((tmpValue), (tmpState), (textFragment)[4], 0xf7537e82, 6);                                          \\\n        MD5_FUNC_I((tmpValue), (tmpState), (textFragment)[11], 0xbd3af235, 10);                                        \\\n        MD5_FUNC_I((tmpValue), (tmpState), (textFragment)[2], 0x2ad7d2bb, 15);                                         \\\n        MD5_FUNC_I((tmpValue), (tmpState), (textFragment)[9], 0xeb86d391, 21);                                         \\\n    } while (0)": "61", "#define BITSIZE(t) (sizeof(t) * BITS_PRE_BYTE)": "62", "#define PUT_UINT32_BE(v, p, i)                                                                                         \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        (p)[(i) + 0] = (uint8_t)((v) >> 24);                                                                           \\\n        (p)[(i) + 1] = (uint8_t)((v) >> 16);                                                                           \\\n        (p)[(i) + 2] = (uint8_t)((v) >> 8);                                                                            \\\n        (p)[(i) + 3] = (uint8_t)((v) >> 0);                                                                            \\\n    } while (0)": "63", "#define GET_UINT32_BE(p, i)                                                                                            \\\n    (((uint32_t)(p)[(i) + 0] << 24) | ((uint32_t)(p)[(i) + 1] << 16) | ((uint32_t)(p)[(i) + 2] << 8) |                 \\\n     ((uint32_t)(p)[(i) + 3] << 0))": "64", "#define VOS_ROTR32(x, uiBlcLen) (((x) << (32 - (uiBlcLen))) | ((x) >> (uiBlcLen)))": "65", "#define VOS_ROUND(a, b, c, d, e, f, g, h, i, k, W)                                                                     \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        (h) += (VOS_ROTR32((e), 6) ^ VOS_ROTR32((e), 11) ^ VOS_ROTR32((e), 25)) + ((g) ^ ((e) & ((f) ^ (g)))) + (k) +  \\\n               (W)[(i)];                                                                                               \\\n        (d) += (h);                                                                                                    \\\n        (h) += (VOS_ROTR32((a), 2) ^ VOS_ROTR32((a), 13) ^ VOS_ROTR32((a), 22)) + (((a) & ((b) | (c))) | ((b) & (c))); \\\n    } while (0)": "66", "#define BZP_INVALID_BLOCK_SIZE(blockSize)                                                                              \\\n    ((blockSize) < BZP_BLOCK_SIZE_LEVEL_LOWER_LIMIT || (blockSize) > BZP_BLOCK_SIZE_LEVEL_UPPER_LIMIT)": "67", "#define BZP_INVALID_ALPHA_SIZE(alphaSize) ((alphaSize) > BZP_MAX_ALPHA_SIZE || (alphaSize) < 1)": "68", "#define BZP_MAX_FUN(a, b) (((a) > (b)) ? (a) : (b))": "69", "#define BZP_MIN_FUN(a, b) (((a) < (b)) ? (a) : (b))": "70", "#define BZP_UPDATE_CRC(crcVar, cha)                                                                                    \\\n    {                                                                                                                  \\\n        (crcVar) = ((crcVar) << 8) ^ g_bzpCRC32Table[((crcVar) >> 24) ^ ((uint8_t)(cha))];                             \\\n    }": "71", "#define CMPTLZ_ERROR_CONVERT(x) (int32_t)((CMPTLZ_MODULE << 16) | (uint32_t)(x))": "72", "#define CMPTLZ_HANDLE_CONVERT(x) (int32_t)((CMPTLZ_MODULE << 16) | ((uint32_t)(x) << 8))": "73", "#define CMPTLZ_LOG(error_code, fmt, ...)                                                                               \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        CmptlzLogWrite((size_t)(error_code), __FUNCTION__, __LINE__, fmt, __VA_ARGS__);                                \\\n    } while (0)": "74", "#define CMPTLZ_LIKELY(expr) __builtin_expect(expr, true)": "75", "#define CMPTLZ_UNLIKELY(expr) __builtin_expect(expr, false)": "76", "#define CMPTLZ_WRITE32BIT(ptr, val) (((CmptlzUnalignU32 *)(ptr))->v = (val))": "77", "#define CMPTLZ_READ32BIT(ptr) (((const CmptlzUnalignU32 *)(ptr))->v)": "78", "#define CMPTLZ_CALC_POS_STATE(procPos, pbMask) (((procPos) & (pbMask)) << 4)": "79", "#define CMPTLZ_RANGE_UPDATE_AFTER_DEC_BIT0(range, rangeBound)                                                          \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        (range) = (rangeBound);                                                                                        \\\n    } while (0)": "80", "#define CMPTLZ_RANGE_UPDATE_AFTER_DEC_BIT1(range, rangeCode, rangeBound)                                               \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        (range) -= (rangeBound);                                                                                       \\\n        (rangeCode) -= (rangeBound);                                                                                   \\\n    } while (0)": "81", "#define CMPTLZ_RANGE_TRY_NORMALIZE(range, rangeCode, bufTryDec, bufLimit)                                              \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        if ((range) < CMPTLZ_RANGE_DOWN_LIMIT)                                                                         \\\n        {                                                                                                              \\\n            if ((bufTryDec) >= (bufLimit))                                                                             \\\n            {                                                                                                          \\\n                return CMPTLZ_DEC_INPUT_EOF;                                                                           \\\n            }                                                                                                          \\\n            (range) <<= CMPTLZ_ONE_BYTE_WIDTH;                                                                         \\\n            (rangeCode) <<= CMPTLZ_ONE_BYTE_WIDTH;                                                                     \\\n            (rangeCode) |= (*(bufTryDec)++);                                                                           \\\n        }                                                                                                              \\\n    } while (0)": "82", "#define CMPTLZ_SINGLE_BIT_TRY_DEC(range, rangeCode, rangeBound, decSym, probSym)                                       \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        (rangeBound) = ((range) >> CMPTLZ_PROB_LG_BIT) * (*(probSym));                                                 \\\n        if ((rangeCode) < (rangeBound))                                                                                \\\n        {                                                                                                              \\\n            CMPTLZ_RANGE_UPDATE_AFTER_DEC_BIT0(range, rangeBound);                                                     \\\n            (decSym) = ((decSym) << 1);                                                                                \\\n        }                                                                                                              \\\n        else                                                                                                           \\\n        {                                                                                                              \\\n            CMPTLZ_RANGE_UPDATE_AFTER_DEC_BIT1(range, rangeCode, rangeBound);                                          \\\n            (decSym) = ((decSym) << 1) + 1;                                                                            \\\n        }                                                                                                              \\\n    } while (0)": "83", "#define CMPTLZ_MATCH_BIT_TRY_DEC(range, rangeCode, rangeBound, decSym, probSym)                                        \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        (rangeBound) = ((range) >> CMPTLZ_PROB_LG_BIT) * (*(probSym));                                                 \\\n        if ((rangeCode) < (rangeBound))                                                                                \\\n        {                                                                                                              \\\n            CMPTLZ_RANGE_UPDATE_AFTER_DEC_BIT0(range, rangeBound);                                                     \\\n            (decSym) = ((decSym) << 1);                                                                                \\\n            (offset) ^= (bit);                                                                                         \\\n        }                                                                                                              \\\n        else                                                                                                           \\\n        {                                                                                                              \\\n            CMPTLZ_RANGE_UPDATE_AFTER_DEC_BIT1(range, rangeCode, rangeBound);                                          \\\n            (decSym) = ((decSym) << 1) + 1;                                                                            \\\n        }                                                                                                              \\\n    } while (0)": "84", "#define CMPTLZ_RANGE_NORMALIZE(range, rangeCode, bufToDec)                                                             \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        if ((range) < CMPTLZ_RANGE_DOWN_LIMIT)                                                                         \\\n        {                                                                                                              \\\n            (range) <<= CMPTLZ_ONE_BYTE_WIDTH;                                                                         \\\n            (rangeCode) <<= CMPTLZ_ONE_BYTE_WIDTH;                                                                     \\\n            (rangeCode) |= (*(bufToDec)++);                                                                            \\\n        }                                                                                                              \\\n    } while (0)": "85", "#define CMPTLZ_IS_THE_BIT_0(probSlot, range, rangeCode, rangeBound)                                                    \\\n    (rangeBound) = (range >> CMPTLZ_PROB_LG_BIT) * (*(probSlot));                                                      \\\n    if ((rangeCode) < (rangeBound))": "86", "#define CMPTLZ_RANGE_UPDATE_0(prob, range, rangeBound)                                                                 \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        (range) = (rangeBound);                                                                                        \\\n        *(prob) = (CmptLzDecProb)((*(prob)) + ((CMPTLZ_PROB_LG - (*(prob))) >> CMPTLZ_RANGE_CODE_SIZE));               \\\n    } while (0)": "87", "#define CMPTLZ_RANGE_UPDATE_1(prob, range, rangeCode, rangeBound)                                                      \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        (range) -= (rangeBound);                                                                                       \\\n        (rangeCode) -= (rangeBound);                                                                                   \\\n        *(prob) = (CmptLzDecProb)((*(prob)) - ((*(prob)) >> CMPTLZ_RANGE_CODE_SIZE));                                  \\\n    } while (0)": "88", "#define CMPTLZ_NORMAL_BIT_DEC(probLit, range, rangeCode, rangeBound, decSym)                                           \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        (rangeBound) = ((range) >> CMPTLZ_PROB_LG_BIT) * (*(probLit));                                                 \\\n        if ((rangeCode) < (rangeBound))                                                                                \\\n        {                                                                                                              \\\n            CMPTLZ_RANGE_UPDATE_0(probLit, range, rangeBound);                                                         \\\n            (decSym) = ((decSym) << 1);                                                                                \\\n        }                                                                                                              \\\n        else                                                                                                           \\\n        {                                                                                                              \\\n            CMPTLZ_RANGE_UPDATE_1(probLit, range, rangeCode, rangeBound);                                              \\\n            (decSym) = ((decSym) << 1) + 1;                                                                            \\\n        }                                                                                                              \\\n    } while (0)": "89", "#define CMPTLZ_MATCH_BIT_DEC(probSlot, range, rangeCode, rangeBound, decSym, matchSym, offset, bit, bufToDec)          \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        (matchSym) <<= 1;                                                                                              \\\n        (bit) = (offset);                                                                                              \\\n        (offset) &= (matchSym);                                                                                        \\\n        (probLit) = (probSlot) + ((offset) + (bit) + (decSym));                                                        \\\n        (rangeBound) = ((range) >> CMPTLZ_PROB_LG_BIT) * (*(probLit));                                                 \\\n        if ((rangeCode) < (rangeBound))                                                                                \\\n        {                                                                                                              \\\n            CMPTLZ_RANGE_UPDATE_0(probLit, range, rangeBound);                                                         \\\n            (decSym) = ((decSym) << 1);                                                                                \\\n            (offset) ^= (bit);                                                                                         \\\n        }                                                                                                              \\\n        else                                                                                                           \\\n        {                                                                                                              \\\n            CMPTLZ_RANGE_UPDATE_1(probLit, range, rangeCode, rangeBound);                                              \\\n            (decSym) = ((decSym) << 1) + 1;                                                                            \\\n        }                                                                                                              \\\n        CMPTLZ_RANGE_NORMALIZE(range, rangeCode, bufToDec);                                                            \\\n    } while (0)": "90", "#define CMPTLZ_DIST_BIT_DEC(probDist, probSlot, range, rangeCode, rangeBound, decDist, decBit)                         \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        (probDist) = (probSlot) + (decDist);                                                                           \\\n        (rangeBound) = ((range) >> CMPTLZ_PROB_LG_BIT) * (*(probDist));                                                \\\n        if ((rangeCode) < (rangeBound))                                                                                \\\n        {                                                                                                              \\\n            CMPTLZ_RANGE_UPDATE_0(probDist, range, rangeBound);                                                        \\\n            (decDist) += (decBit);                                                                                     \\\n        }                                                                                                              \\\n        else                                                                                                           \\\n        {                                                                                                              \\\n            CMPTLZ_RANGE_UPDATE_1(probDist, range, rangeCode, rangeBound);                                             \\\n            (decDist) += (decBit) * 2;                                                                                 \\\n        }                                                                                                              \\\n    } while (0)": "91", "#define CMPTLZ_LEN_BIT_DEC(probSlot, range, rangeCode, rangeBound, decSym, bufToDec)                                   \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        CMPTLZ_NORMAL_BIT_DEC(probSlot, range, rangeCode, rangeBound, decSym);                                         \\\n        CMPTLZ_RANGE_NORMALIZE(range, rangeCode, bufToDec);                                                            \\\n    } while (0)": "92", "#define CMPTLZ_POSSLOT_BIT_DEC(probSlot, range, rangeCode, rangeBound, decSym, bufToDec)                               \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        CMPTLZ_NORMAL_BIT_DEC(probSlot, range, rangeCode, rangeBound, decSym);                                         \\\n        CMPTLZ_RANGE_NORMALIZE(range, rangeCode, bufToDec);                                                            \\\n    } while (0)": "93", "#define GET_LEN_TO_POS_STATE(len) (((len) < CMPT_NUM_LEN_POS_STATE + 1) ? (len) - 2 : CMPT_NUM_LEN_POS_STATE - 1)": "94", "#define CMPT_RC_BREAK_CHECK(rcCtx, buf, res)                                                                           \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        if ((buf) == (rcCtx->bufBase + CMPTLZ_RC_BUFFER_SIZE))                                                         \\\n        {                                                                                                              \\\n            (res) = CmptRcFlush64Kb(rcCtx);                                                                            \\\n            CMPTLZ_RETURN_IF_NOT_OK(res);                                                                              \\\n        }                                                                                                              \\\n    } while (0)": "95", "#define CMPT_RC_BREAK_SHIFTING(rcCtx, buf, res)                                                                        \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        CMPT_RC_BREAK_CHECK(rcCtx, buf, res);                                                                          \\\n        if ((rcCtx)->cacheSize == 0)                                                                                   \\\n        {                                                                                                              \\\n            return CMPT_OK;                                                                                            \\\n        }                                                                                                              \\\n    } while (0)": "96", "#define CMPT_RC_NORMALIZE(rcCtx, range, shiftRes)                                                                      \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        if ((range) < CMPT_RC_MIN_RANGE)                                                                               \\\n        {                                                                                                              \\\n            (range) <<= 8;                                                                                             \\\n            (shiftRes) = CmptRcShiftLow(rcCtx);                                                                        \\\n        }                                                                                                              \\\n    } while (0)": "97", "#define CMPT_RC_GET_NEWBOUND(prob, bit0Prob, range, newBound)                                                          \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        (bit0Prob) = *(prob);                                                                                          \\\n        newBound = ((range) >> 11) * (bit0Prob);                                                                       \\\n    } while (0)": "98", "#define CMPT_RC_BIT_PROCESS(rcCtx, prob, bit, bit0Prob, range, newBound, shiftRes)                                     \\\n    {                                                                                                                  \\\n        do                                                                                                             \\\n        {                                                                                                              \\\n            uint32_t mask = 0 - (uint32_t)(bit);                                                                       \\\n            CMPT_RC_GET_NEWBOUND(prob, bit0Prob, range, newBound);                                                     \\\n            (range) &= mask;                                                                                           \\\n            mask &= (newBound);                                                                                        \\\n            (range) -= mask;                                                                                           \\\n            (rcCtx)->low += mask;                                                                                      \\\n            mask = (uint32_t)(bit) - 1;                                                                                \\\n            (range) += (newBound) & mask;                                                                              \\\n            mask &= (CMPTLZ_PROB_MAX_NUM - ((1 << 5) - 1));                                                            \\\n            mask += ((1 << 5) - 1);                                                                                    \\\n            (bit0Prob) += (int)(mask - (bit0Prob)) >> 5;                                                               \\\n            *(prob) = (CmptlzProb)(bit0Prob);                                                                          \\\n            CMPT_RC_NORMALIZE(rcCtx, range, shiftRes);                                                                 \\\n        } while (0);                                                                                                   \\\n    }": "99", "#define CMPT_RC_BIT_0(prob, newBound, range, bit0Prob)                                                                 \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        (range) = (newBound);                                                                                          \\\n        *(prob) = (CmptlzProb)((bit0Prob) + ((CMPTLZ_PROB_MAX_NUM - (bit0Prob)) >> 5));                                \\\n    } while (0)": "100", "#define CMPT_RC_BIT_1(rcCtx, prob, newBound, range, bit0Prob)                                                          \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        (range) -= (newBound);                                                                                         \\\n        (rcCtx)->low += (newBound);                                                                                    \\\n        *(prob) = (CmptlzProb)((bit0Prob) - ((bit0Prob) >> 5));                                                        \\\n    } while (0)": "101", "#define CMPT_RC_BIT_0_PROCESS(rcCtx, prob, newBound, range, bit0Prob, shiftRes)                                        \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        CMPT_RC_BIT_0(prob, newBound, range, bit0Prob);                                                                \\\n        CMPT_RC_NORMALIZE(rcCtx, range, shiftRes);                                                                     \\\n    } while (0)": "102", "#define CMPT_RC_BIT_1_PROCESS(rcCtx, prob, newBound, range, bit0Prob, shiftRes)                                        \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        CMPT_RC_BIT_1(rcCtx, prob, newBound, range, bit0Prob);                                                         \\\n        CMPT_RC_NORMALIZE(rcCtx, range, shiftRes);                                                                     \\\n    } while (0)": "103", "#define CMPT_LIT_SUBCODER(probs, litCtx, lpMask, pos, prevByte)                                                        \\\n    ((probs)[(((pos) & (lpMask)) << (litCtx)) + ((uint32_t)(prevByte) >> (8U - (litCtx)))])": "104", "#define CMPT_HASH_MASK_CALC(hashMask)                                                                                  \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        hashMask |= hashMask >> 1;                                                                                     \\\n        hashMask |= hashMask >> 2;                                                                                     \\\n        hashMask |= hashMask >> 4;                                                                                     \\\n        hashMask |= hashMask >> 8;                                                                                     \\\n        hashMask >>= 1;                                                                                                \\\n        hashMask |= 0xFFFF;                                                                                            \\\n        if (hashMask > (1 << 24))                                                                                      \\\n        {                                                                                                              \\\n            hashMask >>= 1;                                                                                            \\\n        }                                                                                                              \\\n    } while (0)": "105", "#define CMPT_HASH_4_CALC(mf, cur, temp, hash2Value, hash3Value, hashValue)                                             \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        temp = mf->hashRootTable[cur[0]] ^ cur[1];                                                                     \\\n        hash2Value = temp & CMPTLZ_HASH_2_MASK;                                                                        \\\n        hash3Value = (temp ^ ((uint32_t)(cur[2]) << 8)) & CMPTLZ_HASH_3_MASK;                                          \\\n        hashValue = (temp ^ ((uint32_t)(cur[2]) << 8) ^ (mf->hashRootTable[cur[3]] << 5)) & mf->hashMask;              \\\n    } while (0)": "106", "#define CMPT_HASH_UPDATE(mf, hash2Value, hash3Value, hashValue, pos)                                                   \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        mf->hash[hash2Value] = pos;                                                                                    \\\n        mf->hash[CMPTLZ_FIX_3_HASH + hash3Value] = pos;                                                                \\\n        mf->hash[CMPTLZ_FIX_4_HASH + hashValue] = pos;                                                                 \\\n    } while (0)": "107", "#define CMPT_HASH_FIND_2_BYTES(mf, delta2, longestLen, matchesCount, cur, matches)                                     \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        if (delta2 < mf->cycleSize && *(cur - delta2) == *cur)                                                         \\\n        {                                                                                                              \\\n            longestLen = CMPT_MF_MATCH_2_BYTES;                                                                        \\\n            matches[0].len = CMPT_MF_MATCH_2_BYTES;                                                                    \\\n            matches[0].dist = delta2 - 1;                                                                              \\\n            matchesCount = 1;                                                                                          \\\n        }                                                                                                              \\\n    } while (0)": "108", "#define CMPT_HASH_FIND_3_BYTES(mf, delta2, delta3, longestLen, matchesCount, cur, matches)                             \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        if (delta2 != delta3 && delta3 < mf->cycleSize && *(cur - delta3) == *cur)                                     \\\n        {                                                                                                              \\\n            longestLen = CMPT_MF_MATCH_3_BYTES;                                                                        \\\n            matches[matchesCount++].dist = delta3 - 1;                                                                 \\\n            delta2 = delta3;                                                                                           \\\n        }                                                                                                              \\\n    } while (0)": "109", "#define CMPT_MF_MOVE_POS(mf)                                                                                           \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        mf->readPos++;                                                                                                 \\\n        mf->cyclePos++;                                                                                                \\\n        mf->cyclePos = (mf->cyclePos == mf->cycleSize) ? 0 : mf->cyclePos;                                             \\\n        if (CMPTLZ_UNLIKELY(mf->readPos + mf->offset == CMPTLZ_UINT32_MAX))                                            \\\n        {                                                                                                              \\\n            CmptMfMovePos(mf);                                                                                         \\\n        }                                                                                                              \\\n    } while (0)": "110", "#define CMPT_MF_LEFT_SON_UPDATE(ptr1, pair, curMatch, len1, len)                                                       \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        *ptr1 = curMatch;                                                                                              \\\n        ptr1 = pair + 1;                                                                                               \\\n        curMatch = *ptr1;                                                                                              \\\n        len1 = len;                                                                                                    \\\n    } while (0)": "111", "#define CMPT_MF_RIGHT_SON_UPDATE(ptr0, pair, curMatch, len0, len)                                                      \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        *ptr0 = curMatch;                                                                                              \\\n        ptr0 = pair;                                                                                                   \\\n        curMatch = *ptr0;                                                                                              \\\n        len0 = len;                                                                                                    \\\n    } while (0)": "112", "#define CMPTLZ_FIND_MIN(x, y) ((x) < (y) ? (x) : (y))": "113", "#define CMPTLZ_FIND_MAX(x, y) ((x) > (y) ? (x) : (y))": "114", "#define NOT_EQUAL_2_BYTES(a, b) ((a)[0] != (b)[0] || (a)[1] != (b)[1])": "115", "#define CMPTLZ_RETURN_IF_NOT_OK(res)                                                                                   \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        if (CMPTLZ_UNLIKELY(res != CMPT_OK))                                                                           \\\n        {                                                                                                              \\\n            return res;                                                                                                \\\n        }                                                                                                              \\\n    } while (0)": "116", "#define CMPT_GET_DIST_STATE(len) (((len) < 4 + CMPTLZ_MATCH_LEN_MIN) ? (len) - CMPTLZ_MATCH_LEN_MIN : 4 - 1)": "117", "#define CMPT_STATE_UPDATE_WHEN_LIT(state)                                                                              \\\n    (state) = (((state) <= SHORTREP_LIT_LIT) ? LIT_LIT : (((state) <= LIT_SHORTREP) ? (state) - 3 : (state) - 6))": "118", "#define CMPT_STATE_UPDATE_WHEN_MATCH(state) (state) = (((state) < 7) ? LIT_MATCH : NOTLIT_MATCH)": "119", "#define CMPT_STATE_UPDATE_WHEN_LONGREP(state) (state) = (((state) < 7) ? LIT_LONGREP : NOTLIT_REP)": "120", "#define CMPT_STATE_UPDATE_WHEN_SHORTREP(state) (state) = (((state) < 7) ? LIT_SHORTREP : NOTLIT_REP)": "121", "#define CMPTLZ_SET_DICTSIZE_BY_LEVEL(level, dictSize)                                                                  \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        dictSize = (level <= 5) ? (1 << (level * 2 + 14)) : ((level <= 7) ? (1 << 25) : (1 << 26));                    \\\n    } while (0)": "122", "#define CMPTLZ_SET_FB_BY_LEVEL(level, fastBytes) (fastBytes = ((level < 7) ? 32 : 64))": "123", "#define CMPT_LIT_PROB_GET(encCtx, litProb, pos, prevByte)                                                              \\\n    (litProb + (uint32_t)3 * (((((pos) << 8) + (prevByte)) & encCtx->lpMask) << encCtx->litMarcov.lcBits))": "124", "#define RAPIDLZ_RETURN_IF_NOT_TRUE(condition, errCode)                                                                 \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        if (!condition)                                                                                                \\\n        {                                                                                                              \\\n            RAPIDLZ_LOG(errCode, \" \");                                                                                 \\\n            return errCode;                                                                                            \\\n        }                                                                                                              \\\n    } while (0)": "125", "#define RAPIDLZ_RETURN_IF_NOT_EOK(condition, errCode)                                                                  \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        if (condition != EOK)                                                                                          \\\n        {                                                                                                              \\\n            RAPIDLZ_LOG(errCode, \" \");                                                                                 \\\n            return errCode;                                                                                            \\\n        }                                                                                                              \\\n    } while (0)": "126", "#define RAPIDLZ_POSITION_UPDATE(curSrc, curDest, len)                                                                  \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        curDest += len;                                                                                                \\\n        curSrc += len;                                                                                                 \\\n    } while (0)": "127", "#define RAPIDLZ_SAFE_LIT_COPY(curSrc, leftSrcSize, curDest, destEnd, litLen)                                           \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        if (RAPIDLZ_UNLIKELY(litLen > leftSrcSize || memmove_s(curDest, destEnd - curDest, curSrc, litLen) != EOK))    \\\n        {                                                                                                              \\\n            RAPIDLZ_LOG(RAPIDLZ_DST_SIZE_SMALL, \"litLen:%u dstEnd - dst:%zu\\n\", litLen, leftSrcSize);                  \\\n            return RAPIDLZ_ERROR_OUTPUT;                                                                               \\\n        }                                                                                                              \\\n    } while (0)": "128", "#define RAPIDLZ_SAFE_COPY_TILL_END(curSrc, leftSrcSize, curDest, destEnd, len)                                         \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        RAPIDLZ_SAFE_LIT_COPY(curSrc, leftSrcSize, curDest, destEnd, len);                                             \\\n        RAPIDLZ_POSITION_UPDATE(curSrc, curDest, len);                                                                 \\\n        if (leftSrcSize == len)                                                                                        \\\n        {                                                                                                              \\\n            return curDest - (uint8_t *)(dest);                                                                        \\\n        }                                                                                                              \\\n    } while (0)": "129", "#define RAPIDLZ_FAST_SAFE_COPY_BY_BYTES(curDest, matchSrc, len)                                                        \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        while ((len) > 2)                                                                                              \\\n        {                                                                                                              \\\n            *(curDest)++ = *(matchSrc)++;                                                                              \\\n            *(curDest)++ = *(matchSrc)++;                                                                              \\\n            *(curDest)++ = *(matchSrc)++;                                                                              \\\n            (len) -= 3;                                                                                                \\\n        }                                                                                                              \\\n        if ((len) > 0)                                                                                                 \\\n        {                                                                                                              \\\n            *(curDest)++ = *(matchSrc)++;                                                                              \\\n            if ((len) > 1)                                                                                             \\\n            {                                                                                                          \\\n                *(curDest)++ = *(matchSrc)++;                                                                          \\\n            }                                                                                                          \\\n        }                                                                                                              \\\n    } while (0)": "130", "#define RAPIDLZ_LITERAL_LEN_COPY_END(curDest, len)                                                                     \\\n    ((curDest) + (len) + 1 + (((len) + RAPIDLZ_MAX_BYTE_VALUE - RAPIDLZ_MAX_4BIT_VALUE) / RAPIDLZ_MAX_BYTE_VALUE))": "131", "#define RAPIDLZ_LIT_AND_MATCH_COPY_END(curDest, matchLen)                                                              \\\n    (curDest) + (1 + RAPIDLZ_LAST_LITERALS) + ((matchLen + 240) / RAPIDLZ_MAX_BYTE_VALUE)": "132", "#define RAPIDLZ_CONTINUE_IF_NOT_A_MATCH(matchOffset, prefixDictLimit, current)                                         \\\n    if (((matchOffset) < (prefixDictLimit)) || ((matchOffset) + RAPIDLZ_MAX_OFFSET < (current)))                       \\\n    {                                                                                                                  \\\n        continue;                                                                                                      \\\n    }": "133", "#define RAPIDLZ_DICT_FAST_COPY_AVAIL(curSrc, len, srcEndFast, curDest, destEndFast)                                    \\\n    (((curSrc) + (len) <= (srcEndFast)) && ((curDest) + (len) <= (destEndFast)))": "134", "#define RAPIDLZ_GET_MATCH_LEN(len, curSrc, srcEnd, temp)                                                               \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        if ((len) < RAPIDLZ_MAX_4BIT_VALUE)                                                                            \\\n        {                                                                                                              \\\n            (len) += 4;                                                                                                \\\n        }                                                                                                              \\\n        else                                                                                                           \\\n        {                                                                                                              \\\n            RAPIDLZ_READ_OPTIONAL_LENGTH((len), (curSrc), (srcEnd), (temp));                                           \\\n            (len) += 4;                                                                                                \\\n        }                                                                                                              \\\n    } while (0)": "135", "#define RAPIDLZ_LOG(error_code, fmt, ...)                                                                              \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        RapidlzLogWrite((size_t)(error_code), RAPIDLZFILENAME, __LINE__, fmt, __VA_ARGS__);                            \\\n    } while (0)": "136", "#define RAPIDLZ_LIKELY(x) (__builtin_expect(!!(x), 1))": "137", "#define RAPIDLZ_UNLIKELY(x) (__builtin_expect(!!(x), 0))": "138", "#define RAPIDLZ_READ16BIT(ptr) (((const RapidlzUnalignU16 *)(ptr))->v)": "139", "#define RAPIDLZ_READ32BIT(ptr) (((const RapidlzUnalignU32 *)(ptr))->v)": "140", "#define RAPIDLZ_READ64BIT(ptr) (((const RapidlzUnalignU64 *)(ptr))->v)": "141", "#define RAPIDLZ_WRITE64BIT(ptr, val) (((RapidlzUnalignU64 *)(ptr))->v = (val))": "142", "#define RAPIDLZ_ASSERT(x) assert(x)": "143", "#define RAPIDLZ_EXPAND_FORWARD(srcBegin, matchBegin, srcCurr, srcAnchor)                                               \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        while ((srcBegin) < (matchBegin) && (srcCurr) > (srcAnchor) &&                                                 \\\n               RAPIDLZ_UNLIKELY((matchBegin)[-1] == (srcCurr)[-1]))                                                    \\\n        {                                                                                                              \\\n            (matchBegin)--;                                                                                            \\\n            (srcCurr)--;                                                                                               \\\n        }                                                                                                              \\\n    } while (0)": "144", "#define RAPIDLZ_READ_OPTIONAL_LENGTH(len, srcCurr, srcEnd, temp)                                                       \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        if (RAPIDLZ_LIKELY((srcCurr) < (srcEnd)))                                                                      \\\n        {                                                                                                              \\\n            (temp) = *(srcCurr)++;                                                                                     \\\n            (len) += (temp);                                                                                           \\\n        }                                                                                                              \\\n        while (((temp) == RAPIDLZ_MAX_BYTE_VALUE) && (srcCurr) < (srcEnd))                                             \\\n        {                                                                                                              \\\n            (temp) = *(srcCurr)++;                                                                                     \\\n            (len) += (temp);                                                                                           \\\n        }                                                                                                              \\\n    } while (0)": "145", "#define SAFE_COPY_MATCH(dstCurr, matchSrc, matchLength)                                                                \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        while ((matchLength)-- > 0)                                                                                    \\\n        {                                                                                                              \\\n            *(dstCurr)++ = *(matchSrc)++;                                                                              \\\n        }                                                                                                              \\\n    } while (0)": "146", "#define RAPIDLZ_COMPRESSBOUND(size) ((uint32_t)(size) > RAPIDLZ_MAX_INPUT_SIZE ? 0 : (size) + ((size) / 255) + 16)": "147", "#define BZP_BLOCK_FULL(bwt) (bwt->nBlock >= bwt->nBlockMax)": "149", "#define BZP_BUFF_READ_EMPTY(bzpf) (bzpf->input->pos >= bzpf->input->nBuf)": "150"}