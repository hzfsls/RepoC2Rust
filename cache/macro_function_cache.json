{
    "#define VOS_AVLL_INIT_TREE(TREE, COMPARE, KEY_OFF, NODE_OFF)                                                           \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        (TREE).stTreeInfo.pfCompare = (COMPARE);                                                                       \\\n        (TREE).stTreeInfo.usKeyOffset = (KEY_OFF);                                                                     \\\n        (TREE).stTreeInfo.usNodeOffset = (NODE_OFF);                                                                   \\\n        VOS_AVL3_INIT_TREE((TREE).stTree, (TREE).stTreeInfo);                                                          \\\n    } while (0)": "macro_rules! VOS_AVLL_INIT_TREE {\n    ($TREE:expr, $COMPARE:expr, $KEY_OFF:expr, $NODE_OFF:expr) => {\n        $TREE.stTreeInfo.pfCompare = $COMPARE;\n        $TREE.stTreeInfo.usKeyOffset = $KEY_OFF;\n        $TREE.stTreeInfo.usNodeOffset = $NODE_OFF;\n        VOS_AVL3_INIT_TREE!($TREE.stTree, $TREE.stTreeInfo);\n    }\n}\npub(crate) use VOS_AVLL_INIT_TREE;\n",
    "#define VOS_AVLL_INIT_NODE(NODE) VOS_AVL3_INIT_NODE((NODE))": "macro_rules! VOS_AVLL_INIT_NODE { ($NODE:expr) => { VOS_AVL3_INIT_NODE!($NODE) } }\npub(crate) use VOS_AVLL_INIT_NODE;\n",
    "#define VOS_AVLL_INSERT(TREE, NODE) VOS_AVL3_INSERT((TREE).stTree, (NODE), (TREE).stTreeInfo)": "macro_rules! VOS_AVLL_INSERT { ($TREE:expr, $NODE:expr) => \n    {\n        VOS_AVL3_INSERT!($TREE.stTree, $NODE, $TREE.stTreeInfo)\n    }\n}\npub(crate) use VOS_AVLL_INSERT;\n",
    "#define VOS_AVLL_INSERT_OR_FIND(TREE, NODE) VOS_AVL3_INSERT_OR_FIND((TREE).stTree, (NODE), (TREE).stTreeInfo)": "macro_rules! VOS_AVLL_INSERT_OR_FIND {\n    ($TREE:expr, $NODE:expr) => {\n        VOS_AVL3_INSERT_OR_FIND!($TREE.stTree.cast(), $NODE.cast(), $TREE.stTreeInfo.cast())\n    }\n}\npub(crate) use VOS_AVLL_INSERT_OR_FIND;\n",
    "#define VOS_AVLL_DELETE(TREE, NODE) VOS_AVL3_DELETE((TREE).stTree, (NODE))": "macro_rules! VOS_AVLL_DELETE { ($TREE:expr, $NODE:expr) => { VOS_AVL3_DELETE!($TREE.stTree, $NODE) } }\npub(crate) use VOS_AVLL_DELETE;\n",
    "#define VOS_AVLL_FIND(TREE, KEY) VOS_AVL3_FIND((TREE).stTree, (KEY), (TREE).stTreeInfo)": "macro_rules! VOS_AVLL_FIND {\n    ($TREE:expr, $KEY:expr) => {\n        VOS_AVL3_FIND!($TREE.stTree, $KEY, $TREE.stTreeInfo)\n    }\n}\npub(crate) use VOS_AVLL_FIND;\n",
    "#define VOS_AVLL_NEXT(TREE, NODE) VOS_AVL3_NEXT((NODE), (TREE).stTreeInfo)": "macro_rules! VOS_AVLL_NEXT { ($TREE:expr, $NODE:expr) => { VOS_AVL3_NEXT!($NODE, $TREE.stTreeInfo) } }\npub(crate) use VOS_AVLL_NEXT;\n",
    "#define VOS_AVLL_PREV(TREE, NODE) VOS_AVL3_PREV((NODE), (TREE).stTreeInfo)": "macro_rules! VOS_AVLL_PREV { ($TREE:expr, $NODE:expr) => { VOS_AVL3_PREV!($NODE, $TREE.stTreeInfo) } }\npub(crate) use VOS_AVLL_PREV;\n",
    "#define VOS_AVLL_FIRST(TREE) VOS_AVL3_FIRST((TREE).stTree, (TREE).stTreeInfo)": "macro_rules! VOS_AVLL_FIRST {\n    ($TREE:expr) => {\n        VOS_AVL3_FIRST!($TREE.stTree.cast(), $TREE.stTreeInfo.cast())\n    }\n}\npub(crate) use VOS_AVLL_FIRST;\n",
    "#define VOS_AVLL_LAST(TREE) VOS_AVL3_LAST((TREE).stTree, (TREE).stTreeInfo)": "macro_rules! VOS_AVLL_LAST { ($TREE:expr) => { VOS_AVL3_LAST!($TREE.stTree, $TREE.stTreeInfo) } }\npub(crate) use VOS_AVLL_LAST;\n",
    "#define VOS_AVLL_IN_TREE(NODE) VOS_AVL3_IN_TREE((NODE))": "macro_rules! VOS_AVLL_IN_TREE { ($NODE:expr) => { VOS_AVL3_IN_TREE!($NODE) } }\npub(crate) use VOS_AVLL_IN_TREE;\n",
    "#define VOS_AVLL_FIND_NEXT(TREE, KEY) VOS_AVL3_FIND_NEXT((TREE).stTree, (KEY), (TREE).stTreeInfo)": "macro_rules! VOS_AVLL_FIND_NEXT {\n    ($TREE:expr, $KEY:expr) => {\n        VOS_AVL3_FIND_NEXT!($TREE.stTree, $KEY, $TREE.stTreeInfo)\n    }\n}\npub(crate) use VOS_AVLL_FIND_NEXT;\n",
    "#define VOS_AVLL_FIND_OR_FIND_NEXT(TREE, KEY) VOS_AVL3_FIND_OR_FIND_NEXT((TREE).stTree, (KEY), (TREE).stTreeInfo)": "macro_rules! VOS_AVLL_FIND_OR_FIND_NEXT {\n    ($TREE:expr, $KEY:expr) => {\n        VOS_AVL3_FIND_OR_FIND_NEXT!($TREE.stTree.cast(), $KEY.cast(), $TREE.stTreeInfo.cast())\n    }\n}\npub(crate) use VOS_AVLL_FIND_OR_FIND_NEXT;\n",
    "#define VOS_AVL3_INIT_TREE(TREE, TREE_INFO)                                                                            \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        (TREE).pstFirst = (AVL3_NODE *)AVL_NULL_PTR;                                                                   \\\n        (TREE).pstLast = (AVL3_NODE *)AVL_NULL_PTR;                                                                    \\\n        (TREE).pstRoot = (AVL3_NODE *)AVL_NULL_PTR;                                                                    \\\n    } while (0)": "macro_rules! VOS_AVL3_INIT_TREE {\n    ($TREE:expr, $TREE_INFO:expr) => {\n        $TREE.pstFirst = AVL_NULL_PTR!().cast::<Ptr<AVL3_NODE>>();\n        $TREE.pstLast = AVL_NULL_PTR!().cast::<Ptr<AVL3_NODE>>();\n        $TREE.pstRoot = AVL_NULL_PTR!().cast::<Ptr<AVL3_NODE>>();\n    }\n}\npub(crate) use VOS_AVL3_INIT_TREE;\n",
    "#define VOS_AVL3_INIT_NODE(NODE)                                                                                       \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        (NODE).pstParent = (AVL3_NODE *)AVL_NULL_PTR;                                                                  \\\n        (NODE).pstLeft = (AVL3_NODE *)AVL_NULL_PTR;                                                                    \\\n        (NODE).pstRight = (AVL3_NODE *)AVL_NULL_PTR;                                                                   \\\n        (NODE).sLHeight = -1;                                                                                          \\\n        (NODE).sRHeight = -1;                                                                                          \\\n    } while (0)": "macro_rules! VOS_AVL3_INIT_NODE {\n    ($NODE:expr) => {\n        $NODE.pstParent = AVL_NULL_PTR!().cast::<Ptr<AVL3_NODE>>();\n        $NODE.pstLeft = AVL_NULL_PTR!().cast::<Ptr<AVL3_NODE>>();\n        $NODE.pstRight = AVL_NULL_PTR!().cast::<Ptr<AVL3_NODE>>();\n        $NODE.sLHeight = -1;\n        $NODE.sRHeight = -1;\n    }\n}\npub(crate) use VOS_AVL3_INIT_NODE;\n",
    "#define VOS_AVL3_INSERT(TREE, NODE, TREE_INFO) (AVL_NULL_PTR == VOS_AVL3_Insert_Or_Find(&(TREE), &(NODE), &(TREE_INFO)))": "macro_rules! VOS_AVL3_INSERT { ($TREE:expr, $NODE:expr, $TREE_INFO:expr) => \n    { \n        AVL_NULL_PTR!() == VOS_AVL3_Insert_Or_Find(c_ref!($TREE), c_ref!($NODE), c_ref!($TREE_INFO)) \n    } \n}\npub(crate) use VOS_AVL3_INSERT;\n",
    "#define VOS_AVL3_INSERT_OR_FIND(TREE, NODE, TREE_INFO) VOS_AVL3_Insert_Or_Find(&(TREE), &(NODE), &(TREE_INFO))": "macro_rules! VOS_AVL3_INSERT_OR_FIND {\n    ($TREE:expr, $NODE:expr, $TREE_INFO:expr) => {\n        VOS_AVL3_Insert_Or_Find(c_ref!($TREE), c_ref!($NODE), c_ref!($TREE_INFO))\n    }\n}\npub(crate) use VOS_AVL3_INSERT_OR_FIND;\n",
    "#define VOS_AVL3_DELETE(TREE, NODE) VOS_AVL3_Delete(&(TREE), &(NODE))": "macro_rules! VOS_AVL3_DELETE {\n    ($TREE:expr, $NODE:expr) => {\n        VOS_AVL3_Delete(c_ref!($TREE), c_ref!($NODE))\n    }\n}\npub(crate) use VOS_AVL3_DELETE;\n",
    "#define VOS_AVL3_FIND(TREE, KEY, TREE_INFO) VOS_AVL3_Find(&(TREE), (KEY), &(TREE_INFO))": "macro_rules! VOS_AVL3_FIND {\n    ($TREE:expr, $KEY:expr, $TREE_INFO:expr) => {\n        VOS_AVL3_Find(c_ref!($TREE), $KEY.cast(), c_ref!($TREE_INFO))\n    }\n}\npub(crate) use VOS_AVL3_FIND;\n",
    "#define VOS_AVL3_NEXT(NODE, TREE_INFO) VOS_AVL3_Next(&(NODE), &(TREE_INFO))": "macro_rules! VOS_AVL3_NEXT { ($NODE:expr, $TREE_INFO:expr) => \n    {\n        VOS_AVL3_Next(c_ref!($NODE), c_ref!($TREE_INFO))\n    }\n}\npub(crate) use VOS_AVL3_NEXT;\n",
    "#define VOS_AVL3_PREV(NODE, TREE_INFO) VOS_AVL3_Prev(&(NODE), &(TREE_INFO))": "macro_rules! VOS_AVL3_PREV { ($NODE:expr, $TREE_INFO:expr) => { VOS_AVL3_Prev(c_ref!($NODE), c_ref!($TREE_INFO)) } }\npub(crate) use VOS_AVL3_PREV;\n",
    "#define VOS_AVL3_FIRST(TREE, TREE_INFO) VOS_AVL3_First(&(TREE), &(TREE_INFO))": "macro_rules! VOS_AVL3_FIRST {\n    ($TREE:expr, $TREE_INFO:expr) => {\n        VOS_AVL3_First(c_ref!($TREE), c_ref!($TREE_INFO))\n    }\n}\npub(crate) use VOS_AVL3_FIRST;\n",
    "#define VOS_AVL3_LAST(TREE, TREE_INFO) VOS_AVL3_Last(&(TREE), &(TREE_INFO))": "macro_rules! VOS_AVL3_LAST { ($TREE:expr, $TREE_INFO:expr) => { VOS_AVL3_Last(c_ref!($TREE), c_ref!($TREE_INFO)) } }\npub(crate) use VOS_AVL3_LAST;\n",
    "#define VOS_AVL3_IN_TREE(NODE) (((NODE).sLHeight != -1) && ((NODE).sRHeight != -1))": "macro_rules! VOS_AVL3_IN_TREE { ($NODE:expr) => { ($NODE.sLHeight != -1) && ($NODE.sRHeight != -1) } }\npub(crate) use VOS_AVL3_IN_TREE;\n",
    "#define VOS_AVL3_FIND_NEXT(TREE, KEY, TREE_INFO) AVL3_Find_Or_Find_Next(&(TREE), (KEY), AVL_TRUE, &(TREE_INFO))": "macro_rules! VOS_AVL3_FIND_NEXT {\n    ($TREE:expr, $KEY:expr, $TREE_INFO:expr) => {\n        AVL3_Find_Or_Find_Next(c_ref!($TREE), $KEY, AVL_TRUE!(), c_ref!($TREE_INFO))\n    }\n}\npub(crate) use VOS_AVL3_FIND_NEXT;\n",
    "#define VOS_AVL3_FIND_OR_FIND_NEXT(TREE, KEY, TREE_INFO) AVL3_Find_Or_Find_Next(&(TREE), (KEY), AVL_FALSE, &(TREE_INFO))": "macro_rules! VOS_AVL3_FIND_OR_FIND_NEXT {\n    ($TREE:expr, $KEY:expr, $TREE_INFO:expr) => {\n        AVL3_Find_Or_Find_Next(c_ref!($TREE), $KEY, AVL_FALSE!(), c_ref!($TREE_INFO))\n    }\n}\npub(crate) use VOS_AVL3_FIND_OR_FIND_NEXT;\n",
    "#define VOS_AVL3_MAX(X, Y) (((X) > (Y)) ? (X) : (Y))": "macro_rules! VOS_AVL3_MAX { ($X:expr, $Y:expr) => { if $X > $Y { $X } else { $Y } } }\npub(crate) use VOS_AVL3_MAX;\n",
    "#define VOS_AVL_INIT_TREE(TREE, COMPARE)                                                                               \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        (TREE).pfnCompare = (COMPARE);                                                                                 \\\n        (TREE).pstFirst = (AVL_NODE *)AVL_NULL_PTR;                                                                    \\\n        (TREE).pstLast = (AVL_NODE *)AVL_NULL_PTR;                                                                     \\\n        (TREE).pstRoot = (AVL_NODE *)AVL_NULL_PTR;                                                                     \\\n    } while (0)": "macro_rules! VOS_AVL_INIT_TREE {\n    ($TREE:expr, $COMPARE:expr) => {\n        $TREE.pfnCompare = $COMPARE;\n        $TREE.pstFirst = AVL_NULL_PTR!().cast::<Ptr<AVL_NODE>>();\n        $TREE.pstLast = AVL_NULL_PTR!().cast::<Ptr<AVL_NODE>>();\n        $TREE.pstRoot = AVL_NULL_PTR!().cast::<Ptr<AVL_NODE>>();\n    }\n}\npub(crate) use VOS_AVL_INIT_TREE;\n",
    "#define VOS_AVL_INIT_NODE(NODE, SELF, KEY)                                                                             \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        (NODE).pstParent = (AVL_NODE *)AVL_NULL_PTR;                                                                   \\\n        (NODE).pstLeft = (AVL_NODE *)AVL_NULL_PTR;                                                                     \\\n        (NODE).pstRight = (AVL_NODE *)AVL_NULL_PTR;                                                                    \\\n        (NODE).pSelf = (SELF);                                                                                         \\\n        (NODE).pKey = (KEY);                                                                                           \\\n        (NODE).sLHeight = -1;                                                                                          \\\n        (NODE).sRHeight = -1;                                                                                          \\\n    } while (0)": "macro_rules! VOS_AVL_INIT_NODE {\n    ($NODE:expr, $SELF:expr, $KEY:expr) => {\n        $NODE.pstParent = AVL_NULL_PTR!().cast::<Ptr<AVL_NODE>>();\n        $NODE.pstLeft = AVL_NULL_PTR!().cast::<Ptr<AVL_NODE>>();\n        $NODE.pstRight = AVL_NULL_PTR!().cast::<Ptr<AVL_NODE>>();\n        $NODE.pSelf = $SELF;\n        $NODE.pKey = $KEY;\n        $NODE.sLHeight = -1;\n        $NODE.sRHeight = -1;\n    }\n}\npub(crate) use VOS_AVL_INIT_NODE;\n",
    "#define VOS_AVL_INSERT(TREE, NODE) (VOS_AVL_Insert_Or_Find(&(TREE), &(NODE)) == AVL_NULL_PTR)": "macro_rules! VOS_AVL_INSERT { ($TREE:expr, $NODE:expr) => \n    {\n        VOS_AVL_Insert_Or_Find(c_ref!($TREE), c_ref!($NODE)) == AVL_NULL_PTR!()\n    }\n}\npub(crate) use VOS_AVL_INSERT;\n",
    "#define VOS_AVL_INSERT_OR_FIND(TREE, NODE) VOS_AVL_Insert_Or_Find(&(TREE), &(NODE))": "macro_rules! VOS_AVL_INSERT_OR_FIND {\n    ($TREE:expr, $NODE:expr) => {\n        VOS_AVL_Insert_Or_Find(c_ref!($TREE), c_ref!($NODE))\n    }\n}\npub(crate) use VOS_AVL_INSERT_OR_FIND;\n",
    "#define VOS_AVL_DELETE(TREE, NODE) VOS_AVL_Delete(&(TREE), &(NODE))": "macro_rules! VOS_AVL_DELETE { ($TREE:expr, $NODE:expr) => \n    {\n        VOS_AVL_Delete(c_ref!($TREE), c_ref!($NODE));\n    }\n}\npub(crate) use VOS_AVL_DELETE;\n",
    "#define VOS_AVL_FIND(TREE, KEY) VOS_AVL_Find(&(TREE), (KEY))": "macro_rules! VOS_AVL_FIND { ($TREE:expr, $KEY:expr) => { VOS_AVL_Find(c_ref!($TREE), $KEY) } }\npub(crate) use VOS_AVL_FIND;\n",
    "#define VOS_AVL_NEXT(NODE) VOS_AVL_Next(&(NODE))": "macro_rules! VOS_AVL_NEXT { ($NODE:expr) => { VOS_AVL_Next(c_ref!($NODE)) } }\npub(crate) use VOS_AVL_NEXT;\n",
    "#define VOS_AVL_PREV(NODE) VOS_AVL_Prev(&(NODE))": "macro_rules! VOS_AVL_PREV { ($NODE:expr) => { VOS_AVL_Prev(c_ref!($NODE)) } }\npub(crate) use VOS_AVL_PREV;\n",
    "#define VOS_AVL_FIRST(TREE)                                                                                            \\\n    (((&(TREE))->pstFirst != (AVL_NODE *)AVL_NULL_PTR) ? (&(TREE))->pstFirst->pSelf : AVL_NULL_PTR)": "macro_rules! VOS_AVL_FIRST {\n    ($TREE:expr) => {\n        if c_ref!($TREE).pstFirst != AVL_NULL_PTR!() {\n            c_ref!($TREE).pstFirst.pSelf\n        } else {\n            AVL_NULL_PTR!()\n        }\n    }\n}\npub(crate) use VOS_AVL_FIRST;\n",
    "#define VOS_AVL_LAST(TREE) (((&(TREE))->pstLast != (AVL_NODE *)AVL_NULL_PTR) ? (&(TREE))->pstLast->pSelf : AVL_NULL_PTR)": "macro_rules! VOS_AVL_LAST {\n    ($TREE:expr) => {\n        if c_ref!($TREE).pstLast != AVL_NULL_PTR!().cast::<Ptr<AVL_NODE>>() {\n            c_ref!($TREE).pstLast.pSelf\n        } else {\n            AVL_NULL_PTR!()\n        }\n    }\n}\npub(crate) use VOS_AVL_LAST;\n",
    "#define VOS_AVL_IN_TREE(NODE) (((NODE).sLHeight != -1) && ((NODE).sRHeight != -1))": "macro_rules! VOS_AVL_IN_TREE { ($NODE:expr) => { ($NODE.sLHeight != -1) && ($NODE.sRHeight != -1) } }\npub(crate) use VOS_AVL_IN_TREE;\n",
    "#define VOS_AVL_FIND_NEXT(TREE, KEY) VOS_AVL_Find_Or_Find_Next(&(TREE), (KEY), AVL_TRUE)": "macro_rules! VOS_AVL_FIND_NEXT { ($TREE:expr, $KEY:expr) => { VOS_AVL_Find_Or_Find_Next(c_ref!($TREE), $KEY, AVL_TRUE!()) } }\npub(crate) use VOS_AVL_FIND_NEXT;\n",
    "#define VOS_AVL_FIND_OR_FIND_NEXT(TREE, KEY) VOS_AVL_Find_Or_Find_Next(&(TREE), (KEY), AVL_FALSE)": "macro_rules! VOS_AVL_FIND_OR_FIND_NEXT {\n    ($TREE:expr, $KEY:expr) => {\n        VOS_AVL_Find_Or_Find_Next(c_ref!($TREE), $KEY, AVL_FALSE!())\n    }\n}\npub(crate) use VOS_AVL_FIND_OR_FIND_NEXT;\n",
    "#define VOS_V2_AVL_MAX(X, Y) (((X) > (Y)) ? (X) : (Y))": "macro_rules! VOS_V2_AVL_MAX { ($X:expr, $Y:expr) => { if $X > $Y { $X } else { $Y } } }\npub(crate) use VOS_V2_AVL_MAX;\n",
    "#define FIND_LEFTMOST_NODE(pstNode)                                                                                    \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        while ((pstNode)->pstLeft != AVL_NULL_PTR)                                                                     \\\n        {                                                                                                              \\\n            (pstNode) = (pstNode)->pstLeft;                                                                            \\\n        }                                                                                                              \\\n    } while (0)": "macro_rules! FIND_LEFTMOST_NODE { ($pstNode:expr) =>\n    {\n        while $pstNode.pstLeft != AVL_NULL_PTR!()\n        {\n            $pstNode = $pstNode.pstLeft;\n        }\n    }\n}\npub(crate) use FIND_LEFTMOST_NODE;\n",
    "#define FIND_RIGHTMOST_NODE(pstNode)                                                                                   \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        while ((pstNode)->pstRight != AVL_NULL_PTR)                                                                    \\\n        {                                                                                                              \\\n            (pstNode) = (pstNode)->pstRight;                                                                           \\\n        }                                                                                                              \\\n    } while (0)": "macro_rules! FIND_RIGHTMOST_NODE { ($pstNode:expr) =>\n    {\n        while $pstNode.pstRight != AVL_NULL_PTR!()\n        {\n            $pstNode = $pstNode.pstRight;\n        }\n    }\n}\npub(crate) use FIND_RIGHTMOST_NODE;\n",
    "#define TREE_OR_TREEINFO_IS_NULL(pstTree, pstTreeInfo) (((pstTree) == AVL_NULL_PTR) || ((pstTreeInfo) == AVL_NULL_PTR))": "macro_rules! TREE_OR_TREEINFO_IS_NULL { ($pstTree:expr, $pstTreeInfo:expr) => { ($pstTree == AVL_NULL_PTR!()) || ($pstTreeInfo == AVL_NULL_PTR!()) } }\npub(crate) use TREE_OR_TREEINFO_IS_NULL;\n",
    "#define GET_NODE_START_ADDRESS(pstNode, usOffset)                                                                      \\\n    (((pstNode) != AVL_NULL_PTR) ? (void *)((unsigned char *)(pstNode) - (usOffset)) : AVL_NULL_PTR)": "macro_rules! GET_NODE_START_ADDRESS {\n    ($pstNode:expr, $usOffset:expr) => {\n        if $pstNode != AVL_NULL_PTR!() {\n            $pstNode.cast::<Ptr<u8>>() - $usOffset\n        } else {\n            AVL_NULL_PTR!()\n        }\n    }\n}\npub(crate) use GET_NODE_START_ADDRESS;\n",
    "#define GET_KEYOFFSET(pstTreeInfo) ((int)((pstTreeInfo)->usKeyOffset - (pstTreeInfo)->usNodeOffset))": "macro_rules! GET_KEYOFFSET { ($pstTreeInfo:expr) => { ($pstTreeInfo.usKeyOffset - $pstTreeInfo.usNodeOffset) as i32 } }\npub(crate) use GET_KEYOFFSET;\n"
}