{"typedef struct AVLBaseNode\n    {\n        struct AVLBaseNode *pstParent;\n        struct AVLBaseNode *pstLeft;\n        struct AVLBaseNode *pstRight;\n        short int sLHeight;\n        short int sRHeight;\n    } AVLBASE_NODE_S;": "1", "typedef struct AVLBaseTree\n    {\n        AVLBASE_NODE_S *pstRoot;\n        AVLBASE_NODE_S *pstFirst;\n        AVLBASE_NODE_S *pstLast;\n    } AVLBASE_TREE_S;": "2", "typedef AVL3_COMPARE AVLL_COMPARE;": "3", "typedef AVL3_NODE AVLL_NODE;": "4", "typedef struct avll_tree\n    {\n        AVL3_TREE stTree;\n        AVL3_TREE_INFO stTreeInfo;\n    } AVLL_TREE;": "5", "typedef long (*AVL3_COMPARE)(const void *, const void *);": "6", "typedef struct avl3_node\n    {\n        struct avl3_node *pstParent;\n        struct avl3_node *pstLeft;\n        struct avl3_node *pstRight;\n        short int sLHeight;\n        short int sRHeight;\n    } AVL3_NODE;": "7", "typedef struct avl3_tree_info\n    {\n        AVL3_COMPARE pfCompare;\n        unsigned short int usKeyOffset;\n        unsigned short int usNodeOffset;\n    } AVL3_TREE_INFO;": "8", "typedef struct avl3_tree\n    {\n        AVL3_NODE *pstRoot;\n        AVL3_NODE *pstFirst;\n        AVL3_NODE *pstLast;\n    } AVL3_TREE;": "9", "typedef long (*AVL_V2_COMPARE_FUNC)(const void *, const void *);": "10", "typedef struct avl_node\n    {\n        struct avl_node *pstParent;\n        struct avl_node *pstLeft;\n        struct avl_node *pstRight;\n        short int sLHeight;\n        short int sRHeight;\n        void *pSelf;\n        void *pKey;\n    } AVL_NODE;": "11", "typedef struct avl_tree\n    {\n        AVL_V2_COMPARE_FUNC pfnCompare;\n        AVL_NODE *pstRoot;\n        AVL_NODE *pstFirst;\n        AVL_NODE *pstLast;\n    } AVL_TREE;": "12", "typedef struct\n    {\n        BzpStream *input;\n        BzpStream *output;\n        int32_t state;\n        int32_t lasChar;\n        int32_t num;\n        int32_t pad;\n    } BzpFile;": "13", "typedef struct\n    {\n        uint8_t *out;\n        int32_t num;\n        uint32_t buf;\n        int32_t nBuf;\n        int32_t blockSize;\n    } BzpOutComdata;": "14", "typedef struct\n    {\n        BzpBwtInfo *bwt;\n        BzpHuffmanGroups *huffman;\n        BzpMtfInfo *mtf;\n        BzpFile *compressFile;\n        BzpOutComdata *outData;\n    } BzpAlgorithmInfo;": "15", "typedef struct\n    {\n        BzpStream *input;\n        BzpStream *output;\n        int32_t lasChar;\n        int32_t num;\n        uint32_t buf;\n        int32_t nBuf;\n        int32_t blockSize;\n        uint32_t blockCRC;\n        int32_t list[BZP_ASCII_SIZE];\n    } InDeComdata;": "16", "int32_t g_bzpCRC32Table[256] = {\n\n    0x00000000L, 0x04c11db7L, 0x09823b6eL, 0x0d4326d9L, 0x130476dcL, 0x17c56b6bL, 0x1a864db2L, 0x1e475005L, 0x2608edb8L,\n    0x22c9f00fL, 0x2f8ad6d6L, 0x2b4bcb61L, 0x350c9b64L, 0x31cd86d3L, 0x3c8ea00aL, 0x384fbdbdL, 0x4c11db70L, 0x48d0c6c7L,\n    0x4593e01eL, 0x4152fda9L, 0x5f15adacL, 0x5bd4b01bL, 0x569796c2L, 0x52568b75L, 0x6a1936c8L, 0x6ed82b7fL, 0x639b0da6L,\n    0x675a1011L, 0x791d4014L, 0x7ddc5da3L, 0x709f7b7aL, 0x745e66cdL, 0x9823b6e0L, 0x9ce2ab57L, 0x91a18d8eL, 0x95609039L,\n    0x8b27c03cL, 0x8fe6dd8bL, 0x82a5fb52L, 0x8664e6e5L, 0xbe2b5b58L, 0xbaea46efL, 0xb7a96036L, 0xb3687d81L, 0xad2f2d84L,\n    0xa9ee3033L, 0xa4ad16eaL, 0xa06c0b5dL, 0xd4326d90L, 0xd0f37027L, 0xddb056feL, 0xd9714b49L, 0xc7361b4cL, 0xc3f706fbL,\n    0xceb42022L, 0xca753d95L, 0xf23a8028L, 0xf6fb9d9fL, 0xfbb8bb46L, 0xff79a6f1L, 0xe13ef6f4L, 0xe5ffeb43L, 0xe8bccd9aL,\n    0xec7dd02dL, 0x34867077L, 0x30476dc0L, 0x3d044b19L, 0x39c556aeL, 0x278206abL, 0x23431b1cL, 0x2e003dc5L, 0x2ac12072L,\n    0x128e9dcfL, 0x164f8078L, 0x1b0ca6a1L, 0x1fcdbb16L, 0x018aeb13L, 0x054bf6a4L, 0x0808d07dL, 0x0cc9cdcaL, 0x7897ab07L,\n    0x7c56b6b0L, 0x71159069L, 0x75d48ddeL, 0x6b93dddbL, 0x6f52c06cL, 0x6211e6b5L, 0x66d0fb02L, 0x5e9f46bfL, 0x5a5e5b08L,\n    0x571d7dd1L, 0x53dc6066L, 0x4d9b3063L, 0x495a2dd4L, 0x44190b0dL, 0x40d816baL, 0xaca5c697L, 0xa864db20L, 0xa527fdf9L,\n    0xa1e6e04eL, 0xbfa1b04bL, 0xbb60adfcL, 0xb6238b25L, 0xb2e29692L, 0x8aad2b2fL, 0x8e6c3698L, 0x832f1041L, 0x87ee0df6L,\n    0x99a95df3L, 0x9d684044L, 0x902b669dL, 0x94ea7b2aL, 0xe0b41de7L, 0xe4750050L, 0xe9362689L, 0xedf73b3eL, 0xf3b06b3bL,\n    0xf771768cL, 0xfa325055L, 0xfef34de2L, 0xc6bcf05fL, 0xc27dede8L, 0xcf3ecb31L, 0xcbffd686L, 0xd5b88683L, 0xd1799b34L,\n    0xdc3abdedL, 0xd8fba05aL, 0x690ce0eeL, 0x6dcdfd59L, 0x608edb80L, 0x644fc637L, 0x7a089632L, 0x7ec98b85L, 0x738aad5cL,\n    0x774bb0ebL, 0x4f040d56L, 0x4bc510e1L, 0x46863638L, 0x42472b8fL, 0x5c007b8aL, 0x58c1663dL, 0x558240e4L, 0x51435d53L,\n    0x251d3b9eL, 0x21dc2629L, 0x2c9f00f0L, 0x285e1d47L, 0x36194d42L, 0x32d850f5L, 0x3f9b762cL, 0x3b5a6b9bL, 0x0315d626L,\n    0x07d4cb91L, 0x0a97ed48L, 0x0e56f0ffL, 0x1011a0faL, 0x14d0bd4dL, 0x19939b94L, 0x1d528623L, 0xf12f560eL, 0xf5ee4bb9L,\n    0xf8ad6d60L, 0xfc6c70d7L, 0xe22b20d2L, 0xe6ea3d65L, 0xeba91bbcL, 0xef68060bL, 0xd727bbb6L, 0xd3e6a601L, 0xdea580d8L,\n    0xda649d6fL, 0xc423cd6aL, 0xc0e2d0ddL, 0xcda1f604L, 0xc960ebb3L, 0xbd3e8d7eL, 0xb9ff90c9L, 0xb4bcb610L, 0xb07daba7L,\n    0xae3afba2L, 0xaafbe615L, 0xa7b8c0ccL, 0xa379dd7bL, 0x9b3660c6L, 0x9ff77d71L, 0x92b45ba8L, 0x9675461fL, 0x8832161aL,\n    0x8cf30badL, 0x81b02d74L, 0x857130c3L, 0x5d8a9099L, 0x594b8d2eL, 0x5408abf7L, 0x50c9b640L, 0x4e8ee645L, 0x4a4ffbf2L,\n    0x470cdd2bL, 0x43cdc09cL, 0x7b827d21L, 0x7f436096L, 0x7200464fL, 0x76c15bf8L, 0x68860bfdL, 0x6c47164aL, 0x61043093L,\n    0x65c52d24L, 0x119b4be9L, 0x155a565eL, 0x18197087L, 0x1cd86d30L, 0x029f3d35L, 0x065e2082L, 0x0b1d065bL, 0x0fdc1becL,\n    0x3793a651L, 0x3352bbe6L, 0x3e119d3fL, 0x3ad08088L, 0x2497d08dL, 0x2056cd3aL, 0x2d15ebe3L, 0x29d4f654L, 0xc5a92679L,\n    0xc1683bceL, 0xcc2b1d17L, 0xc8ea00a0L, 0xd6ad50a5L, 0xd26c4d12L, 0xdf2f6bcbL, 0xdbee767cL, 0xe3a1cbc1L, 0xe760d676L,\n    0xea23f0afL, 0xeee2ed18L, 0xf0a5bd1dL, 0xf464a0aaL, 0xf9278673L, 0xfde69bc4L, 0x89b8fd09L, 0x8d79e0beL, 0x803ac667L,\n    0x84fbdbd0L, 0x9abc8bd5L, 0x9e7d9662L, 0x933eb0bbL, 0x97ffad0cL, 0xafb010b1L, 0xab710d06L, 0xa6322bdfL, 0xa2f33668L,\n    0xbcb4666dL, 0xb8757bdaL, 0xb5365d03L, 0xb1f740b4L};": "17", "typedef struct\n    {\n        FILE *filePtr;\n        int32_t nBuf;\n        int32_t pos;\n        uint8_t buf[BZP_BUF_SIZE];\n    } BzpStream;": "18", "typedef struct\n    {\n        int32_t *select;\n        int32_t len[BZP_MAX_GROUPS_NUM][BZP_MAX_ALPHA_SIZE];\n        int32_t perm[BZP_MAX_GROUPS_NUM][BZP_MAX_ALPHA_SIZE];\n        int32_t limit[BZP_MAX_GROUPS_NUM][BZP_MAX_ALPHA_SIZE];\n        int32_t base[BZP_MAX_GROUPS_NUM][BZP_MAX_ALPHA_SIZE];\n        int32_t minLens[BZP_MAX_GROUPS_NUM];\n        int32_t nGroups;\n        int32_t nSelect;\n        int32_t alphaSize;\n        int32_t deCodeNum;\n        int32_t selectCnt;\n        int32_t nBlock;\n    } BzpHuffmanDecode;": "19", "typedef struct\n    {\n        int32_t *sorted;\n        uint8_t *block;\n        uint8_t *deCode;\n        int32_t nBlock;\n        int32_t oriPtr;\n    } BzpBwtDecodeInfo;": "20", "typedef struct\n    {\n        int32_t *sortBlock;\n        int32_t *idx;\n        int32_t *isStartPos;\n        uint8_t *block;\n        uint32_t blockCRC;\n        uint32_t combinedCRC;\n        int32_t nBlockMax;\n        int32_t blockId;\n        int32_t nBlock;\n        int32_t oriPtr;\n        bool inUse[BZP_ASCII_SIZE];\n    } BzpBwtInfo;": "21", "typedef struct\n    {\n        int32_t stackL[BZP_MAX_STACK_SIZE];\n        int32_t stackR[BZP_MAX_STACK_SIZE];\n        int32_t cnt;\n        int32_t tl, tr;\n    } BzpQSortInfo;": "22", "typedef struct\n    {\n        uint8_t *block;\n        int32_t *map;\n        int32_t *mtfV;\n        bool *inUse;\n        int32_t mtfFreq[BZP_MAX_ALPHA_SIZE];\n        int32_t nBlock;\n        int32_t nMtf;\n        int32_t nUse;\n        int32_t pad;\n    } BzpMtfInfo;": "23", "typedef struct\n    {\n        int32_t heap[BZP_MAX_ALPHA_SIZE + 1];\n        int32_t weight[BZP_MAX_ALPHA_SIZE * 2];\n        int32_t parent[BZP_MAX_ALPHA_SIZE * 2];\n        int32_t len[BZP_MAX_ALPHA_SIZE];\n        int32_t table[BZP_MAX_ALPHA_SIZE];\n        int32_t nHeap;\n        int32_t nWeight;\n        int32_t alphaSize;\n    } BzpHuffmanInfo;": "24", "typedef struct\n    {\n        int32_t *block;\n        int32_t *mtfFreq;\n        int32_t *select;\n        int32_t *selectMTF;\n        BzpHuffmanInfo huffmanGroups[BZP_MAX_GROUPS_NUM];\n        int32_t cost[BZP_MAX_GROUPS_NUM];\n        int32_t nGroups;\n        int32_t nBlock;\n        int32_t nSelect;\n        int32_t alphaSize;\n    } BzpHuffmanGroups;": "25", "enum BZP_ERROR_BASE_NO\n{\n    BZP_ERROR_MEMORY_OPER_FAILURE = 1,\n    BZP_ERROR_PARAM,\n    BZP_ERROR_IO,\n    BZP_ERROR_DATA,\n    BZP_ERROR_DATA_MAGIC,\n};": "26", "enum BZP_ERROR_STREAM_NO\n{\n    BZP_ERROR_STREAM_COMPRESS_FAILUIRE = 10\n};": "27", "struct _SortedArray\n{\n\n    SortedArrayValue *data;\n\n    unsigned int length;\n\n    unsigned int _alloced;\n\n    SortedArrayEqualFunc equ_func;\n\n    SortedArrayCompareFunc cmp_func;\n};": "28", "typedef struct _BinomialTree BinomialTree;": "29", "struct _BinomialTree\n{\n    BinomialHeapValue value;\n    unsigned short order;\n    unsigned short refcount;\n    BinomialTree **subtrees;\n};": "30", "struct _BinomialHeap\n{\n    BinomialHeapType heap_type;\n    BinomialHeapCompareFunc compare_func;\n    unsigned int num_values;\n    BinomialTree **roots;\n    unsigned int roots_length;\n};": "31", "struct _BloomFilter\n{\n    BloomFilterHashFunc hash_func;\n    unsigned char *table;\n    unsigned int table_size;\n    unsigned int num_functions;\n};": "32", "static const unsigned int salts[] = {\n    0x1953c322, 0x588ccf17, 0x64bf600c, 0xa6be3f3d, 0x341a02ea, 0x15b03217, 0x3b062858, 0x5956fd06,\n    0x18b5624f, 0xe3be0b46, 0x20ffcd5c, 0xa35dfd2b, 0x1fc4a9bf, 0x57c45d5c, 0xa8661c4a, 0x4f1b74d2,\n    0x5a6dde13, 0x3b18dac6, 0x05a8afbf, 0xbbda2fe2, 0xa2520d78, 0xe7934849, 0xd541bc75, 0x09a55b57,\n    0x9b345ae2, 0xfc2d26af, 0x38679cef, 0x81bd1e0d, 0x654681ae, 0x4b3d87ad, 0xd5ff10fb, 0x23b32f67,\n    0xafc7e366, 0xdd955ead, 0xe7c34b1c, 0xfeace0a6, 0xeb16f09d, 0x3c57a72d, 0x2c8294c5, 0xba92662a,\n    0xcd5b2d14, 0x743936c8, 0x2489beff, 0xc6c56e00, 0x74a4f606, 0xb244a94a, 0x5edfc423, 0xf1901934,\n    0x24af7691, 0xf6c98b25, 0xea25af46, 0x76d5f2e6, 0x5e33cdf2, 0x445eb357, 0x88556bd2, 0x70d1da7a,\n    0x54449368, 0x381020bc, 0x1c0520bf, 0xf7e44942, 0xa27e2a58, 0x66866fc5, 0x12519ce7, 0x437a8456,\n};": "33", "typedef struct _Queue Queue;": "34", "typedef void *QueueValue;": "35", "struct _BinaryHeap\n{\n    BinaryHeapType heap_type;\n    BinaryHeapValue *values;\n    unsigned int num_values;\n    unsigned int alloced_size;\n    BinaryHeapCompareFunc compare_func;\n};": "36", "struct _ListEntry\n{\n    ListValue data;\n    ListEntry *prev;\n    ListEntry *next;\n};": "37", "struct _SListEntry\n{\n    SListValue data;\n    SListEntry *next;\n};": "38", "typedef int (*SListCompareFunc)(SListValue value1, SListValue value2);": "39", "typedef int (*SListEqualFunc)(SListValue value1, SListValue value2);": "40", "typedef struct _SListEntry SListEntry;": "41", "typedef struct _SListIterator SListIterator;": "42", "typedef void *SListValue;": "43", "struct _SListIterator\n    {\n        SListEntry **prev_next;\n        SListEntry *current;\n    };": "44", "typedef int (*ArrayListEqualFunc)(ArrayListValue value1, ArrayListValue value2);": "45", "typedef int (*ArrayListCompareFunc)(ArrayListValue value1, ArrayListValue value2);": "46", "typedef void *ArrayListValue;": "47", "typedef struct _ArrayList ArrayList;": "48", "struct _ArrayList\n    {\n\n        ArrayListValue *data;\n\n        unsigned int length;\n\n        unsigned int _alloced;\n    };": "49", "typedef struct _QueueEntry QueueEntry;": "50", "struct _QueueEntry\n{\n    QueueValue data;\n    QueueEntry *prev;\n    QueueEntry *next;\n};": "51", "struct _Queue\n{\n    QueueEntry *head;\n    QueueEntry *tail;\n};": "52", "typedef int (*SortedArrayEqualFunc)(SortedArrayValue value1, SortedArrayValue value2);": "53", "typedef int (*SortedArrayCompareFunc)(SortedArrayValue value1, SortedArrayValue value2);": "54", "typedef void *SortedArrayValue;": "55", "typedef struct _SortedArray SortedArray;": "56", "struct _SetEntry\n{\n    SetValue data;\n    SetEntry *next;\n};": "57", "struct _Set\n{\n    SetEntry **table;\n    unsigned int entries;\n    unsigned int table_size;\n    unsigned int prime_index;\n    SetHashFunc hash_func;\n    SetEqualFunc equal_func;\n    SetFreeFunc free_func;\n};": "58", "static const unsigned int set_primes[] = {\n    193,      389,      769,      1543,      3079,      6151,      12289,     24593,\n    49157,    98317,    196613,   393241,    786433,    1572869,   3145739,   6291469,\n    12582917, 25165843, 50331653, 100663319, 201326611, 402653189, 805306457, 1610612741,\n};": "59", "static const unsigned int set_num_primes = sizeof(set_primes) / sizeof(int);": "60", "typedef unsigned int (*SetHashFunc)(SetValue value);": "61", "typedef int (*SetEqualFunc)(SetValue value1, SetValue value2);": "62", "typedef void (*SetFreeFunc)(SetValue value);": "63", "typedef struct _Set Set;": "64", "typedef struct _SetIterator SetIterator;": "65", "typedef struct _SetEntry SetEntry;": "66", "typedef void *SetValue;": "67", "struct _SetIterator\n    {\n        Set *set;\n        SetEntry *next_entry;\n        unsigned int next_chain;\n    };": "68", "struct _HashTableEntry\n{\n    HashTablePair pair;\n    HashTableEntry *next;\n};": "69", "struct _HashTable\n{\n    HashTableEntry **table;\n    unsigned int table_size;\n    HashTableHashFunc hash_func;\n    HashTableEqualFunc equal_func;\n    HashTableKeyFreeFunc key_free_func;\n    HashTableValueFreeFunc value_free_func;\n    unsigned int entries;\n    unsigned int prime_index;\n};": "70", "static const unsigned int hash_table_primes[] = {\n    193,      389,      769,      1543,      3079,      6151,      12289,     24593,\n    49157,    98317,    196613,   393241,    786433,    1572869,   3145739,   6291469,\n    12582917, 25165843, 50331653, 100663319, 201326611, 402653189, 805306457, 1610612741,\n};": "71", "static const unsigned int hash_table_num_primes = sizeof(hash_table_primes) / sizeof(int);": "72", "typedef int (*BinaryHeapCompareFunc)(BinaryHeapValue value1, BinaryHeapValue value2);": "73", "typedef enum\n    {\n\n        BINARY_HEAP_TYPE_MIN,\n\n        BINARY_HEAP_TYPE_MAX\n    } BinaryHeapType;": "74", "typedef void *BinaryHeapValue;": "75", "typedef struct _BinaryHeap BinaryHeap;": "76", "typedef int (*AVLTreeCompareFunc)(AVLTreeValue value1, AVLTreeValue value2);": "77", "typedef struct _AVLTree AVLTree;": "78", "typedef void *AVLTreeKey;": "79", "typedef void *AVLTreeValue;": "80", "typedef struct _AVLTreeNode AVLTreeNode;": "81", "typedef enum\n    {\n        AVL_TREE_NODE_LEFT = 0,\n        AVL_TREE_NODE_RIGHT = 1\n    } AVLTreeNodeSide;": "82", "typedef int (*ListCompareFunc)(ListValue value1, ListValue value2);": "83", "typedef int (*ListEqualFunc)(ListValue value1, ListValue value2);": "84", "typedef struct _ListEntry ListEntry;": "85", "typedef struct _ListIterator ListIterator;": "86", "typedef void *ListValue;": "87", "struct _ListIterator\n    {\n        ListEntry **prev_next;\n        ListEntry *current;\n    };": "88", "typedef unsigned int (*HashTableHashFunc)(HashTableKey value);": "89", "typedef int (*HashTableEqualFunc)(HashTableKey value1, HashTableKey value2);": "90", "typedef void (*HashTableKeyFreeFunc)(HashTableKey value);": "91", "typedef void (*HashTableValueFreeFunc)(HashTableValue value);": "92", "typedef struct _HashTable HashTable;": "93", "typedef struct _HashTableIterator HashTableIterator;": "94", "typedef struct _HashTableEntry HashTableEntry;": "95", "typedef void *HashTableKey;": "96", "typedef void *HashTableValue;": "97", "typedef struct _HashTablePair\n    {\n        HashTableKey key;\n        HashTableValue value;\n    } HashTablePair;": "98", "struct _HashTableIterator\n    {\n        HashTable *hash_table;\n        HashTableEntry *next_entry;\n        unsigned int next_chain;\n    };": "99", "struct _AVLTreeNode\n{\n    AVLTreeNode *children[2];\n    AVLTreeNode *parent;\n    AVLTreeKey key;\n    AVLTreeValue value;\n    int height;\n};": "100", "struct _AVLTree\n{\n    AVLTreeNode *root_node;\n    AVLTreeCompareFunc compare_func;\n    unsigned int num_nodes;\n};": "101", "typedef int (*BinomialHeapCompareFunc)(BinomialHeapValue value1, BinomialHeapValue value2);": "102", "typedef enum\n    {\n\n        BINOMIAL_HEAP_TYPE_MIN,\n\n        BINOMIAL_HEAP_TYPE_MAX\n    } BinomialHeapType;": "103", "typedef void *BinomialHeapValue;": "104", "typedef struct _BinomialHeap BinomialHeap;": "105", "typedef unsigned int (*BloomFilterHashFunc)(BloomFilterValue data);": "106", "typedef struct _BloomFilter BloomFilter;": "107", "typedef void *BloomFilterValue;": "108", "typedef int (*RBTreeCompareFunc)(RBTreeValue data1, RBTreeValue data2);": "109", "typedef struct _RBTree RBTree;": "110", "typedef void *RBTreeKey;": "111", "typedef void *RBTreeValue;": "112", "typedef struct _RBTreeNode RBTreeNode;": "113", "typedef enum\n    {\n        RB_TREE_NODE_RED,\n        RB_TREE_NODE_BLACK,\n    } RBTreeNodeColor;": "114", "typedef enum\n    {\n        RB_TREE_NODE_LEFT = 0,\n        RB_TREE_NODE_RIGHT = 1\n    } RBTreeNodeSide;": "115", "struct _RBTreeNode\n{\n    RBTreeNodeColor color;\n    RBTreeKey key;\n    RBTreeValue value;\n    RBTreeNode *parent;\n    RBTreeNode *children[2];\n};": "116", "struct _RBTree\n{\n    RBTreeNode *root_node;\n    RBTreeCompareFunc compare_func;\n    int num_nodes;\n};": "117", "typedef struct _Trie Trie;": "118", "typedef void *TrieValue;": "119", "typedef struct _TrieNode TrieNode;": "120", "struct _TrieNode\n{\n    TrieValue data;\n    unsigned int use_count;\n    TrieNode *next[256];\n};": "121", "struct _Trie\n{\n    TrieNode *root_node;\n};": "122", "static CmptlzLogFunc g_cmptlzLogFunc = NULL;": "123", "typedef struct\n{\n    uint32_t v;\n} __attribute__((packed)) CmptlzUnalignU32;": "124", "typedef uint16_t CmptlzProb;": "125", "typedef struct\n    {\n        int level;\n        uint32_t dictSize;\n        int litCtx;\n        int litPos;\n        int posBits;\n        int fastBytes;\n        int numThreads;\n    } CmptlzEncParam;": "126", "typedef struct\n    {\n        uint32_t pos;\n        uint32_t prevByte;\n        CmptlzProb literal[1 << CMPTLZ_LCLP_MAX][CMPTLZ_LIT_MAX_SIZE];\n        uint32_t lcBits;\n        uint32_t posMask;\n    } LitMarcov;": "127", "typedef struct\n    {\n        uint32_t range;\n        uint64_t cache;\n        uint64_t low;\n        uint64_t cacheSize;\n        uint8_t *buf;\n        uint8_t *bufBase;\n        uint8_t *outBuf;\n        size_t outBufLeft;\n    } CmptRcCtx;": "128", "typedef struct TagCmptMatchFinder CmptMfCtx;": "129", "struct TagCmptMatchFinder\n    {\n\n        const uint8_t *srcStart;\n        size_t srcLen;\n\n        uint32_t hashRootTable[256];\n        uint32_t mfStart;\n        uint32_t niceLen;\n        uint32_t readAhead;\n        uint32_t readPos;\n        uint32_t cyclePos;\n        uint32_t cycleSize;\n        uint32_t offset;\n        uint32_t *hash;\n        uint32_t *son;\n        uint32_t depth;\n        uint32_t hashCount;\n        uint32_t sonsCount;\n        uint32_t hashMask;\n    };": "130", "typedef struct\n    {\n        CmptlzProb low[256];\n        CmptlzProb high[1 << CMPT_LEN_HIGH_BITS];\n        uint32_t prices[CMPTLZ_NUM_PB_STATES_MAX]\n                       [(1 << CMPT_LEN_HIGH_BITS) + (1 << CMPT_LEN_MID_BITS) + (1 << CMPT_LEN_LOW_BITS)];\n        uint32_t tableSize;\n    } CmptLenEncoder;": "131", "typedef enum\n    {\n        LIT_LIT,\n        MATCH_LIT_LIT,\n        REP_LIT_LIT,\n        SHORTREP_LIT_LIT,\n        MATCH_LIT,\n        REP_LIT,\n        SHORTREP_LIT,\n        LIT_MATCH,\n        LIT_LONGREP,\n        LIT_SHORTREP,\n        NOTLIT_MATCH,\n        NOTLIT_REP,\n    } CmptlzState;": "132", "typedef struct\n    {\n        uint32_t len;\n        uint32_t dist;\n    } CmptlzMatchPair;": "133", "typedef struct\n    {\n        CmptlzState state;\n        uint32_t price;\n        uint32_t posPrev;\n        uint32_t backPrev;\n        uint32_t backs[CMPTLZ_NUM_REPS];\n    } CmptlzOpt;": "134", "struct TagCmptLzEncCtx\n    {\n\n        int level;\n        int litCtx;\n        int litPos;\n        int posBits;\n        uint32_t dicSize;\n        int endMarker;\n        uint32_t numFastBytes;\n\n        bool encNeedFinish;\n        uint64_t nowpos64;\n        uint32_t cmptlzResponse;\n\n        CmptlzState state;\n        LitMarcov litMarcov;\n        uint32_t reps[CMPTLZ_NUM_REPS];\n\n        CmptlzProb isRep[CMPTLZ_NUM_STATES];\n        CmptlzProb isRepG0[CMPTLZ_NUM_STATES];\n        CmptlzProb isRepG1[CMPTLZ_NUM_STATES];\n        CmptlzProb isRepG2[CMPTLZ_NUM_STATES];\n        CmptlzProb isMatch[CMPTLZ_NUM_STATES][CMPTLZ_NUM_PB_STATES_MAX];\n        CmptlzProb isRep0Long[CMPTLZ_NUM_STATES][CMPTLZ_NUM_PB_STATES_MAX];\n        CmptlzProb probDistSlot[CMPTLZ_DIST_STATE_TOTAL][1 << CMPTLZ_DIST_SLOT_BITS];\n        CmptlzProb probDistSpecial[CMPT_DIST_LIMIT_2];\n        CmptlzProb probAlign[1 << CMPTLZ_ALIGN_BITS];\n\n        uint32_t posMask;\n        uint64_t pbMask;\n        uint64_t lpMask;\n\n        CmptRcCtx *rcCtx;\n\n        CmptMfCtx *mfCtx;\n        CmptlzMatchPair matches[CMPT_MF_LONGEST_MATCH + 1];\n        uint32_t matchesCount;\n        uint32_t longestMatchLen;\n\n        uint32_t backRes;\n        uint32_t lenRes;\n        uint32_t optEndIndex;\n        uint32_t optsCurIndex;\n        CmptlzOpt opts[CMPT_DP_OPTMAX];\n\n        CmptLenEncoder matchLenEncoder;\n        CmptLenEncoder repLenEncoder;\n        int repLenPriceCount;\n\n        int matchPriceCount;\n        uint32_t priceRootTable[CMPT_PRIICE_TABLE_SIZE];\n        uint32_t priceDistSlotTable[CMPTLZ_DIST_STATE_TOTAL][1 << CMPTLZ_DIST_SLOT_BITS];\n        uint32_t priceDistTable[CMPTLZ_DIST_STATE_TOTAL][1 << 7];\n        uint32_t priceAlignTable[1 << CMPTLZ_ALIGN_BITS];\n        uint32_t distTableSize;\n    };": "135", "typedef struct\n    {\n        void *(*CmptLzAlloc)(int32_t enMemType, size_t size);\n        void (*CmptLzFree)(int32_t enMemType, void *address);\n    } CmptLzMemHook;": "136", "typedef void (*CmptlzLogFunc)(const char *message, size_t size);": "137", "typedef enum\n    {\n        CMPTLZ_ERROR_DATA = 1,\n        CMPTLZ_ERROR_MEM,\n        CMPTLZ_ERROR_UNSUPPORTED,\n        CMPTLZ_ENC_ERROR_FILESIZE,\n        CMPTLZ_ENC_CTX_INIT_FAIL,\n        CMPTLZ_ENC_RC_INIT_FAIL,\n        CMPTLZ_ENC_MF_INIT_FAIL,\n        CMPTLZ_ENC_ERROR_WRITE,\n        CMPTLZ_ENC_ERROR_HEAD,\n        CMPTLZ_ENC_ERROR_PARAM,\n        CMPTLZ_ERROR_BUTT\n    } EnCmptErrNo;": "138", "typedef uint16_t CmptLzDecProb;": "139", "typedef enum\n    {\n        CMPTLZ_DICT_MEM = 1,\n        CMPTLZ_PROB_MEM,\n        CMPTLZ_ENC_CCTX,\n        CMPTLZ_MF_CCTX,\n        CMPTLZ_MF_HASH,\n        CMPTLZ_MF_SON,\n        CMPTLZ_RC_CCTX,\n        CMPTLZ_RC_BUF,\n        CMPTLZ_MEM_TYPE_BUT\n    } EnCmptLzMemType;": "140", "typedef struct TagCmptLzEncCtx CmptLzEncCtx;": "141", "typedef struct\n    {\n        int level;\n        uint32_t dictSize;\n        int litCtx;\n        int litPos;\n        int posBits;\n        int fastBytes;\n        int numThreads;\n        unsigned char *protData;\n        size_t protSize;\n        CmptLzMemHook *memHook;\n    } CmptlzCompParam;": "142", "typedef enum\n    {\n        CMPTLZ_FINISH_ANY,\n        CMPTLZ_FINISH_END\n    } EnCmptLzFinMode;": "143", "typedef enum\n    {\n        CMPTLZ_STATUS_NOT_SPECIFIED,\n        CMPTLZ_STATUS_FINISHED_WITH_MARK,\n        CMPTLZ_STATUS_NOT_FINISHED,\n        CMPTLZ_STATUS_NEEDS_MORE_INPUT,\n        CMPTLZ_STATUS_MAYBE_FINISHED_WITHOUT_MARK,\n        CMPTLZ_STATUS_BUT\n    } EnCmptLzStatus;": "144", "typedef struct\n    {\n        unsigned char litCtx;\n        unsigned char litPos;\n        unsigned char posBits;\n        unsigned char alignPad;\n        uint32_t dicSize;\n    } CmptLzDecProt;": "145", "typedef struct\n    {\n        CmptLzDecProt prop;\n        CmptLzDecProb *probs;\n        CmptLzDecProb *probsPlus1664;\n        unsigned char *dict;\n        size_t dictBufSize;\n        size_t dictPos;\n        const unsigned char *buf;\n        uint32_t range;\n        uint32_t code;\n        uint32_t processedPos;\n        uint32_t checkDicSize;\n        uint32_t reps[4];\n        uint32_t state;\n        uint32_t remainLen;\n        uint32_t numProbs;\n        unsigned tempBufSize;\n        unsigned char tempBuf[CMPTLZ_REQUIRED_INPUT_MAX];\n    } CmptLzDecCtx;": "146", "typedef struct\n    {\n        const unsigned char *pSrcIn;\n        size_t strInLen;\n        size_t strInCostLen;\n    } CmptLzDecIn;": "147", "typedef struct\n    {\n        unsigned char *pDestOut;\n        size_t destOutLen;\n        size_t destOutFillLen;\n    } CmptLzDecOut;": "148", "typedef struct\n    {\n        const unsigned char *protData;\n        unsigned protSize;\n        CmptLzMemHook *memHook;\n    } CmptlzDecParam;": "149", "typedef struct TagMd5Ctx\n    {\n        uint32_t aulState[4];\n        uint32_t aulCount[2];\n        uint8_t aucBuffer[64];\n        uint32_t uiPos;\n    } MD5_CTX;": "150", "typedef int (*RapidlzCompressFunc)(RapidlzStreamCtx *strmCtx, const char *src, char *dest, int srcSize,\n                                       int destSize);": "151", "typedef int (*RapidlzDecompressFunc)(const char *const src, char *const dest, int srcSize, int outBufferSize,\n                                         const char *dictStart, int dictSize);": "152", "static int g_enc32table[8] = {0, 1, 2, 1, 0, 4, 4, 4};": "153", "static int g_dec64table[8] = {0, 0, 0, -1, -4, 1, 2, 3};": "154", "static RapidlzLogFunc g_rapidlzLogFunc = NULL;": "155", "typedef struct\n{\n    uint16_t v;\n} __attribute__((packed)) RapidlzUnalignU16;": "156", "typedef struct\n{\n    uint32_t v;\n} __attribute__((packed)) RapidlzUnalignU32;": "157", "typedef struct\n{\n    uint64_t v;\n} __attribute__((packed)) RapidlzUnalignU64;": "158", "typedef struct\n    {\n        int64_t v;\n    } RapidlzUnalign64;": "159", "static uint8_t g_overlapOffAddVal[] = {0, 1, 2, 2, 4, 3, 2, 1};": "160", "typedef struct\n    {\n        uint8_t *hashTable;\n        uint8_t hashType;\n        uint8_t hashBits;\n        uint8_t step;\n        uint8_t bufferLimit;\n    } RapidlzCCtx;": "161", "static const char *g_rapidlzVersion = \"rapidlz 3.24.10.B201\";": "162", "typedef void (*RapidlzLogFunc)(const char *message, size_t size);": "163", "typedef struct TagRapidlzStreamCtx RapidlzStreamCtx;": "164", "struct TagRapidlzStreamCtx\n    {\n        uint32_t hashTable[RAPIDLZ_STREAM_HASH_SIZE];\n        const uint8_t *dict;\n        uint32_t dictSize;\n        uint32_t currentOffset;\n        int acceleration;\n        RapidlzStreamCtx *strmCtxSpecific;\n    };": "165", "static const uint32_t K256[64] = {\n        0x428a2f98UL, 0x71374491UL, 0xb5c0fbcfUL, 0xe9b5dba5UL, 0x3956c25bUL, 0x59f111f1UL, 0x923f82a4UL, 0xab1c5ed5UL,\n        0xd807aa98UL, 0x12835b01UL, 0x243185beUL, 0x550c7dc3UL, 0x72be5d74UL, 0x80deb1feUL, 0x9bdc06a7UL, 0xc19bf174UL,\n        0xe49b69c1UL, 0xefbe4786UL, 0x0fc19dc6UL, 0x240ca1ccUL, 0x2de92c6fUL, 0x4a7484aaUL, 0x5cb0a9dcUL, 0x76f988daUL,\n        0x983e5152UL, 0xa831c66dUL, 0xb00327c8UL, 0xbf597fc7UL, 0xc6e00bf3UL, 0xd5a79147UL, 0x06ca6351UL, 0x14292967UL,\n        0x27b70a85UL, 0x2e1b2138UL, 0x4d2c6dfcUL, 0x53380d13UL, 0x650a7354UL, 0x766a0abbUL, 0x81c2c92eUL, 0x92722c85UL,\n        0xa2bfe8a1UL, 0xa81a664bUL, 0xc24b8b70UL, 0xc76c51a3UL, 0xd192e819UL, 0xd6990624UL, 0xf40e3585UL, 0x106aa070UL,\n        0x19a4c116UL, 0x1e376c08UL, 0x2748774cUL, 0x34b0bcb5UL, 0x391c0cb3UL, 0x4ed8aa4aUL, 0x5b9cca4fUL, 0x682e6ff3UL,\n        0x748f82eeUL, 0x78a5636fUL, 0x84c87814UL, 0x8cc70208UL, 0x90befffaUL, 0xa4506cebUL, 0xbef9a3f7UL, 0xc67178f2UL,\n    };": "166", "typedef struct\n    {\n        uint32_t h[8];\n        uint32_t N[2];\n        uint32_t block[SHA256_BLOCK_SIZE / sizeof(uint32_t)];\n        uint32_t blocklen;\n        uint32_t outlen;\n        uint32_t computed : 1;\n        uint32_t corrupted : 1;\n    } VOS_SHA256_CTX;": "167"}